Index: scripts/services/postfix
===================================================================
RCS file: /var/cvs/logwatch/scripts/services/postfix,v
retrieving revision 1.3
diff -u -r1.3 postfix
--- scripts/services/postfix	18 Nov 2003 14:04:05 -0000	1.3
+++ scripts/services/postfix	26 Nov 2003 13:10:57 -0000
@@ -51,52 +45,70 @@
 $MsgsSent = 0;
 $BytesTransferred = 0;
 $FourHourReturns = 0;
+$ReturnedToSender = 0;
 
 while (defined($ThisLine = <STDIN>)) {
-    if ( ( $ThisLine =~ m/^connect/ ) or 
-	 ( $ThisLine =~ m/^disconnect/ ) or 
-	 ( $ThisLine =~ m/^reload configuration/ ) or 
-	 ( $ThisLine =~ m/^[a-zA-Z0-9]+: client/ ) or 
-	 ( $ThisLine =~ m/^[a-zA-Z0-9]+: message-id/ ) or
-	 ( $ThisLine =~ m/^[a-zA-Z0-9]+: skipped, still being delivered/ ) or
-	 ( $ThisLine =~ m/^warning: [\.0-9]+: address not listed for hostname/ ) or
-	 ( $ThisLine =~ m/^[a-zA-Z0-9]+: to\=\<.*>, relay\=.*, delay\=[0-9]+, status\=[sent|deferred]/ ) or
-	 ( $ThisLine =~ m/^warning: [\.0-9]+: hostname .* verification failed: Host not found/ ) or
-	 ( $ThisLine =~ m/^warning: no MX host for .* has a valid A record$/ ) or
-	 ( $ThisLine =~ m/^warning: numeric domain name in resource data of MX record for .*$/ )) {
-	# We don't care about these
-    }
-    elsif ( ($Bytes) = ($ThisLine =~ /^[a-zA-Z0-9]+: from=.*size=([0-9]+).*$/) ) {
-	$MsgsSent++;
-	$BytesTransferred += $Bytes;
+	if ( ( $ThisLine =~ m/^connect/ ) or 
+		( $ThisLine =~ m/^disconnect/ ) or 
+		( $ThisLine =~ m/^reload configuration/ ) or 
+		( $ThisLine =~ m/^[a-zA-Z0-9]+: client/ ) or 
+		( $ThisLine =~ m/^[a-zA-Z0-9]+: message-id/ ) or
+		( $ThisLine =~ m/^[a-zA-Z0-9]+: skipped, still being delivered/ ) or
+		( $ThisLine =~ m/^warning: [\.0-9]+: address not listed for hostname/ ) or
+		( $ThisLine =~ m/^[a-zA-Z0-9]+: to\=\<.*>, relay\=.*, delay\=[0-9]+, status\=[sent|deferred]/ ) or
+		( $ThisLine =~ m/^warning: [\.0-9]+: hostname .* verification failed: Host not found/ ) or
+		( $ThisLine =~ m/^warning: no MX host for .* has a valid A record$/ ) or
+		( $ThisLine =~ m/^warning: numeric domain name in resource data of MX record for .*$/ ) or
+		( $ThisLine =~ m/^daemon started$/ ) or
+		( $ThisLine =~ m/^terminating on signal 15$/ )
+	) {
+		# We don't care about these
+	}
+	elsif ( ($Bytes) = ($ThisLine =~ /^[a-zA-Z0-9]+: from=.*size=([0-9]+).*$/) ) {
+		$MsgsSent++;
+		$BytesTransferred += $Bytes;
     }
     elsif (($User) = ($ThisLine =~ /^[a-zA-Z0-9]+: to\=\<([^ ]*)>, relay\=local, delay\=[0-9]+, status\=bounced \(unknown user/)) {
-	# unknown user
-        $UnknownUsers{$User}++;
+		# unknown user
+		$UnknownUsers{$User}++;
     }
     elsif (($Dest, $Relay, $Msg) = ($ThisLine =~ /^[a-zA-Z0-9]+: to\=\<([^ ]*)>, relay=([^ ]*).*, delay\=[0-9]+, status\=bounced \(([^)]*)/ )) {
-	# unknown user
-	#$Msg = " hello "
-	#print "bounce message from " . $Dest . " msg : " . $Relay . "\n";
-	if ($Relay =~ m/^[none|local|avcheck]/) {
-	        $Temp = "To " . $Dest . " Msg=\"" . $Msg . "\"";
-        	$LocalBounce{$Temp}++;				
-	} else {
-	        $Temp = "To " . $Dest . " Msg=\"" . $Msg . "\"";
-        	$ForeignBounce{$Temp}++;
-	}
-    }
-    elsif ( ($Relay,$Dest) = ($ThisLine =~ m/^reject: RCPT from ([^ ]*): 554 <([^ ]*)>.* Relay access denied.* to=([^ ]*)/) ) {
-    	# print "reject: " . $ThisLine . "\n";
-	# print "Relay :" . $Relay . " to " . $Dest . "\n";  
-        $Temp = "From " . $Relay . " to " . $Dest;
-        $RelayDenied{$Temp}++;
+		# unknown user
+		# $Msg = " hello "
+		# print "bounce message from " . $Dest . " msg : " . $Relay . "\n";
+		if ($Relay =~ m/^[none|local|avcheck]/) {
+			$Temp = "To " . $Dest . " Msg=\"" . $Msg . "\"";
+			$LocalBounce{$Temp}++;				
+		} else {
+			$Temp = "To " . $Dest . " Msg=\"" . $Msg . "\"";
+			$ForeignBounce{$Temp}++;
+		}
+	}
+	elsif ( ($Relay,$Dest) = ($ThisLine =~ m/^reject: RCPT from ([^ ]*): 554 <([^ ]*)>.* Relay access denied.* to=([^ ]*)/) ) {
+		# print "reject: " . $ThisLine . "\n";
+		# print "Relay :" . $Relay . " to " . $Dest . "\n";
+		$Temp = "From " . $Relay . " to " . $Dest;
+		$RelayDenied{$Temp}++;
     }
     elsif ( ($User,$From) = ($ThisLine =~ /^[a-zA-Z0-9]+: uid=([^ ]*) from=\<([^ ]*)>/)) {
 		#Messages sent by user
 		$Temp = $From . " (uid=" . $User . "): ";
 		$SentBy{$Temp}++;
 	}
+	elsif ( ($From) = ($ThisLine =~ /^[a-zA-Z0-9]+: from=<([^ ]*)>, status=expired, returned to sender$/)) {
+		$ReturnedToSender++;
+	}
+	elsif ( ($Command,$Host) = ($ThisLine =~ /^lost connection after ([^ ]*) from ([^ ]*)$/)) {
+		# Make some better summary with hosts
+		$ConnectionLost{$Command}++;
+	}
+	elsif ( ($Command,$Host) = ($ThisLine =~ /^timeout after ([^ ]*) from ([^ ]*)$/)) {
+		# Make some better summary with hosts
+		$ConnectionLost{$Command}++;
+	}
+	elsif ( ($Rejected,undef,undef) = ($ThisLine =~ /^^[a-zA-Z0-9]+: reject: header (.*); from=<([^ ]*)> to=<([^ ]*)>: Message content rejected$/)) {
+		$HeaderReject{$Rejected}++;
+	}
 #    elsif ( ($Warning)  = ($ThisLine =~ /^[a-zA-Z0-9]+: Authentication-Warning: [^ ]+: ([^ ]+ set sender to [^ ]+ using -f)/) ) {
 #        $AuthWarns{$Warning}++;
 #    }
@@ -116,17 +128,21 @@
 }
 
 if ((@OtherList) or
-    ($MsgsSent > 0) or
-    ($FourHourReturns > 0) or
-    (keys %UnknownUsers) or
-    (keys %RelayDenied) or
-    (keys %ForeignBounce) or
-    (keys %LocalBounce) or
-    (keys %AuthWarns) or
-    (keys %ForwardErrors) or
-	(keys %SentBy)) {
-    print "\n\n --------------------- postfix Begin ------------------------ ";
-
+	($MsgsSent > 0) or
+	($FourHourReturns > 0) or
+	($ReturnedToSender >0) or
+	(keys %UnknownUsers) or
+	(keys %RelayDenied) or
+	(keys %$HeaderReject) or
+	(keys %ForeignBounce) or
+	(keys %LocalBounce) or
+	(keys %AuthWarns) or
+	(keys %ForwardErrors) or
+	(keys %SentBy) or
+	(keys %ConnectionLost)
+) {
+	print "\n\n --------------------- postfix Begin ------------------------ ";
+	
     if($MsgsSent > 0) {
         print "\n\n" . $BytesTransferred . " bytes transferred";
         print "\n" . $MsgsSent . " messages sent";
@@ -136,6 +152,10 @@
         print "\n\n" . $FourHourReturns . " messages returned after 4 hours";
     }
 
+	if ($ReturnedToSender >0) {
+		print "\n\n" . $ReturnedToSender . " messages expired and returned to sender";
+	}
+
 	if (keys %SentBy) {
 		print "\n\nMessages sent by:\n";
 		foreach $ThisOne (keys %SentBy) {
@@ -151,45 +171,59 @@
 	}
 
     if (keys %RelayDenied) {
-	print "\n\nRelaying denied:\n";
-	foreach $ThisOne (keys %RelayDenied) {
-	    print "    " . $ThisOne . ": " . $RelayDenied{$ThisOne} . " Times(s)\n";
-	}
+		print "\n\nRelaying denied:\n";
+		foreach $ThisOne (keys %RelayDenied) {
+			print "    " . $ThisOne . ": " . $RelayDenied{$ThisOne} . " Times(s)\n";
+		}
     }
 
     if (keys %LocalBounce) {
-	print "\n\nLocal Bounce:\n";
-	foreach $ThisOne (keys %LocalBounce) {
-	    print "    " . $ThisOne . ": " . $LocalBounce{$ThisOne} . " Times(s)\n";
-	}
+		print "\n\nLocal Bounce:\n";
+		foreach $ThisOne (keys %LocalBounce) {
+			print "    " . $ThisOne . ": " . $LocalBounce{$ThisOne} . " Times(s)\n";
+		}
     }
 
     if (keys %ForeignBounce) {
-	print "\n\nForeign Bounce:\n";
-	foreach $ThisOne (keys %ForeignBounce) {
-	    print "    " . $ThisOne . ": " . $ForeignBounce{$ThisOne} . " Times(s)\n";
-	}
+		print "\n\nForeign Bounce:\n";
+		foreach $ThisOne (keys %ForeignBounce) {
+			print "    " . $ThisOne . ": " . $ForeignBounce{$ThisOne} . " Times(s)\n";
+		}
     }
 
-    if (keys %AuthWarns) {
-	print "\n\nAuthentication warnings:\n";
-	foreach $ThisOne (keys %AuthWarns) {
-	    print "    " . $ThisOne . ": " . $AuthWarns{$ThisOne} . " Times(s)\n";
+	if (keys %HeaderReject) {
+		print "\n\nHeader content reject:\n";
+		foreach $ThisOne (keys %HeaderReject) {
+			print "    " . $ThisOne . ": " . $HeaderReject{$ThisOne} . " Times(s)\n";
+		}
 	}
+
+    if (keys %AuthWarns) {
+		print "\n\nAuthentication warnings:\n";
+		foreach $ThisOne (keys %AuthWarns) {
+			print "    " . $ThisOne . ": " . $AuthWarns{$ThisOne} . " Times(s)\n";
+		}
     }
 
     if (keys %ForwardErrors) {
-	print "\n\nForwarding errors:\n";
-	foreach $ThisOne (keys %ForwardErrors) {
-	    print "    " . $ThisOne . ": " . $ForwardErrors{$ThisOne} . " Times(s)\n";
+		print "\n\nForwarding errors:\n";
+		foreach $ThisOne (keys %ForwardErrors) {
+			print "    " . $ThisOne . ": " . $ForwardErrors{$ThisOne} . " Times(s)\n";
+		}
 	}
-    }
 
+	if (keys %ConnectionLost) {
+		print "\n\nConnections lost:\n";
+		foreach $ThisOne (keys %ConnectionLost) {
+			print "    Connection lost after command " . $ThisOne . ": " . $ConnectionLost{$ThisOne} . " Times(s)\n";
+		}
+	}
+	
     if ($#OtherList >= 0) {
-	print "\n\n**Unmatched Entries**\n\n";
-	print @OtherList;
-    }
-
+		print "\n\n**Unmatched Entries**\n\n";
+		print @OtherList;
+	}
+	
     print "\n ---------------------- postfix End ------------------------- \n";
 
 }
Index: scripts/services/proftpd-messages
===================================================================
RCS file: /var/cvs/logwatch/scripts/services/proftpd-messages,v
retrieving revision 1.12
diff -u -r1.12 proftpd-messages
--- scripts/services/proftpd-messages	3 Nov 2003 05:07:25 -0000	1.12
+++ scripts/services/proftpd-messages	26 Nov 2003 13:10:58 -0000
@@ -17,114 +17,118 @@
 $IgnoreUnmatched = $ENV{'ftpd_ignore_unmatched'};
 
 while (defined($ThisLine = <STDIN>)) {
-   if ( ( $ThisLine =~ /^FTP session closed./ ) or
-         ( $ThisLine =~ /^(ANONYMOUS )?FTP login as \'.*\' from [^ ]+ \[.*\] to .*/ ) or
-         ( $ThisLine =~ /^FTP no transfer time out, disconnected\./ ) or
-         ( $ThisLine =~ /PAM\(.*\): Authentication failure/ ) or
-         ( $ThisLine =~ /^data_sendfile/ ) or
-         ( $ThisLine =~ / - FTP session opened/ ) or
-         ( $ThisLine =~ / - FTP session closed/ ) or
-         ( $ThisLine =~ / - No certificate files found/ ) or
-         ( $ThisLine =~ /FTP no transfer timeout, disconnected\./ ) or
-         ( $ThisLine =~ /FTP login timed out, disconnected\./ )   ) {
-      # We don't care about these
-   }        			 
-   elsif ( ($Host,$IP,$Email,) = ( $ThisLine =~ /^FTP session opened: ftp\/ftp (.*)\[(.*)\] (.*)$/ ) ) {
-      $Temp = "   " . $Host . " (" . $IP . "): " . $Email . " - ";
-      $AnonLogins{$Temp}++;
-   }
-   elsif ( ($Host, $IP) = ( $ThisLine =~ /\((.*)\[(.*)\]\) - ANON .+: Login successful\./ ) ) {
-      $Temp = "   " . $Host . " (" . $IP . ")";
-      $AnonLogins{$Temp}++;
-   }
-   elsif ( ($User,$Host,$IP) = ( $ThisLine =~ /^FTP session opened: (.*\/.*) (.*)\[(.*)\] (.*)$/ ) ) {
-      $Temp = "   " . $Host .  ": " . $User . " - ";
-      $UserLogins{$Temp}++;
-   }
-   elsif ( ($Host,$IP,$User) = ( $ThisLine =~ /\((.*)\[(.*)\]\) - USER (.+): Login successful/ ) ) {
-      $Temp = "   " . $Host . ": " . $User . " - ";
-      $UserLogins{$Temp}++;
-   }
-   elsif ( ($User) = ( $ThisLine =~ /^failed login, can\'t find user \'(.*)\' $/ ) ) {
-      $Temp = "   " . "Unknown" . " (" . "Unknown.IP" . "): " . $User . " - ";
-      $BadUsers{$Temp}++;
-   }
-   elsif ( ($User,$Host,$IP) = ( $ThisLine =~ /USER (.*): no such user found from (.*) \[(.*)\] to/ ) ) {
-      $Temp = "   " . $Host . ": " . $User . " - ";
-      $BadUsers{$Temp}++;
-   }
-   elsif ( ($Host,$IP,$User) = ( $ThisLine =~ /\((.*)\[(.*)\]\) - no such user '(.*)'$/ ) ) {
-      $Temp = "   " . $Host . ": " . $User . " - ";
-      $BadUsers{$Temp}++;
-   }
-   elsif ( ($Host,$User) = ( $ThisLine =~ /\[(.*)\]\) - USER (.*) \(Login failed\): Incorrect password/ ) ) {
-      $Temp = "   " . $Host . ": " . $User . " - ";
-      $BadPasswds{$Temp}++;
-   }
-   elsif ( ($Host,$User) = ( $ThisLine =~ /\[(.*)\]\) - USER (.*) \(Login failed\): Invalid shell/ ) ) {
-      $Temp = "   " . $Host . ": " . $User . " - ";
-      $BadShell{$Temp}++;
-   }
-   elsif ( ($Host,$Reason) = ( $ThisLine =~ /\[(.*)\]\) - Refused PORT [\d,]+ \((.*)\)/ ) ) {
-      $Temp = "   " . $Host . ": " . $Reason . " - ";
-      $RefusedPorts{$Temp}++;
-   }
-   else {
-      # Report any unmatched entries...
-      push @OtherList,$ThisLine;
+	if ( ( $ThisLine =~ /^FTP session closed./ ) or
+		( $ThisLine =~ /^(ANONYMOUS )?FTP login as \'.*\' from [^ ]+ \[.*\] to .*/ ) or
+		( $ThisLine =~ /^FTP no transfer time out, disconnected\./ ) or
+		( $ThisLine =~ /PAM\(.*\): Authentication failure/ ) or
+		( $ThisLine =~ /^data_sendfile/ ) or
+		( $ThisLine =~ / - FTP session opened/ ) or
+		( $ThisLine =~ / - FTP session closed/ ) or
+		( $ThisLine =~ / - No certificate files found/ ) or
+		( $ThisLine =~ /FTP no transfer timeout, disconnected\./ ) or
+		( $ThisLine =~ /FTP login timed out, disconnected\./ )   ) {
+		#We don't care about these
+	} elsif ( ($Host,$IP,$Email,) = ( $ThisLine =~ /^FTP session opened: ftp\/ftp (.*)\[(.*)\] (.*)$/ ) ) {
+		$Temp = "   " . $Host . " (" . $IP . "): " . $Email . " - ";
+		$AnonLogins{$Temp}++;
+	} elsif ( ($Host, $IP) = ( $ThisLine =~ /\((.*)\[(.*)\]\) - ANON .+: Login successful\./ ) ) {
+		$Temp = "   " . $Host . " (" . $IP . ")";
+		$AnonLogins{$Temp}++;
+	} elsif ( ($User,$Host,$IP) = ( $ThisLine =~ /^FTP session opened: (.*\/.*) (.*)\[(.*)\] (.*)$/ ) ) {
+		$Temp = "   " . $Host .  ": " . $User . " - ";
+		$UserLogins{$Temp}++;
+	} elsif ( ($Host,$IP,$User) = ( $ThisLine =~ /\((.*)\[(.*)\]\) - USER (.+): Login successful/ ) ) {
+		$Temp = "   " . $Host . ": " . $User . " - ";
+	   $UserLogins{$Temp}++;
+   } elsif ( ($User) = ( $ThisLine =~ /^failed login, can\'t find user \'(.*)\' $/ ) ) {
+	   $Temp = "   " . "Unknown" . " (" . "Unknown.IP" . "): " . $User . " - ";
+	   $BadUsers{$Temp}++;
+   } elsif ( ($User,$Host,$IP) = ( $ThisLine =~ /USER (.*): no such user found from (.*) \[(.*)\] to/ ) ) {
+	   $Temp = "   " . $Host . ": " . $User . " - ";
+	   $BadUsers{$Temp}++;
+   } elsif ( ($Host,$Ip,$User) = ( $ThisLine =~ /\((.*)\[(.*)\]\) - no such user '(.*)'.$/ ) ) {
+	   #$Temp = "$Host($Ip)";
+	   $BadUsers{$User}{$Host}++;
+   } elsif ( ($Host,$User) = ( $ThisLine =~ /\[(.*)\]\) - USER (.*) \(Login failed\): Incorrect password/ ) ) {
+	   $Temp = "   " . $Host . ": " . $User . " - ";
+	   $BadPasswds{$Temp}++;
+   } elsif ( ($Host,$User) = ( $ThisLine =~ /\[(.*)\]\) - USER (.*) \(Login failed\): Invalid shell/ ) ) {
+	   $Temp = "   " . $Host . ": " . $User . " - ";
+	   $BadShell{$Temp}++;
+   } elsif ( ($Host,$Ip) = ( $ThisLine =~ /\((.*)\[(.*)\]\) - SECURITY VIOLATION: root login attempted./ ) ) {
+	   $RootLoginAttempt{$Host}++;
+   }elsif ( ($Host,$Reason) = ( $ThisLine =~ /\[(.*)\]\) - Refused PORT [\d,]+ \((.*)\)/ ) ) {
+	   $Temp = "   " . $Host . ": " . $Reason . " - ";
+	   $RefusedPorts{$Temp}++;
+   } else {
+	   # Report any unmatched entries...
+	   push @OtherList,$ThisLine;
    }
 }
 
+##############################################
+
 if ( (keys %AnonLogins) and ($Detail >= 5) ) {
-   print "\nAnonymous FTP Logins:\n";
-   foreach $ThisOne (keys %AnonLogins) {
-      print $ThisOne . $AnonLogins{$ThisOne} . " Time(s)\n";
-   }
+	print "\nAnonymous FTP Logins:\n";
+	foreach $ThisOne (sort {$a cmp $b} keys %AnonLogins) {
+		print $ThisOne . $AnonLogins{$ThisOne} . " Time(s)\n";
+	}
 }
 
 if ( (keys %DeletedFiles) and ($Detail >= 10) ) {
-   print "\nFiles deleted through FTP:\n";
-   foreach $ThisOne (keys %DeletedFiles) {
-      print $ThisOne;
-      print @{$DeletedFiles{$ThisOne}};
-   }
+	print "\nFiles deleted through FTP:\n";
+	foreach $ThisOne (sort {$a cmp $b} keys %DeletedFiles) {
+		print $ThisOne;
+		print @{$DeletedFiles{$ThisOne}};
+	}
 }
 
 if (keys %UserLogins) {
-   print "\nUser FTP Logins:\n";
-   foreach $ThisOne (keys %UserLogins) {
-      print $ThisOne . $UserLogins{$ThisOne} . " Time(s)\n";
-   }
+	print "\nUser FTP Logins:\n";
+	foreach $ThisOne (sort {$a cmp $b} keys %UserLogins) {
+		print $ThisOne . $UserLogins{$ThisOne} . " Time(s)\n";
+	}
 }
 
-if ( ( (keys %BadUsers) or (keys %BadPasswds) ) and ($Detail >= 5) ) {
-   print "\nFailed FTP Logins:\n";
-
-   if ( (keys %BadUsers) and ($Detail >= 5) ) {
-      print "\n  Invalid Username:\n";
-      foreach $ThisOne (keys %BadUsers) {
-         print $ThisOne . $BadUsers{$ThisOne} . " Time(s)\n";
-      }
-   }
-
-   if ( (keys %BadPasswds) and ($Detail >= 5) ) {
-      print "\n  Incorrect Password:\n";
-      foreach $ThisOne (keys %BadPasswds) {
-         print $ThisOne . $BadPasswds{$ThisOne} . " Time(s)\n";
-      }
-   }
-   if ( (keys %BadPasswds) and ($Detail >= 5) ) {
-      print "\n  Invalid Shell:\n";
-      foreach $ThisOne (keys %BadShell) {
-         print $ThisOne . $BadShell{$ThisOne} . " Time(s)\n";
-      }
-   }
+if (keys %RootLoginAttempt) {
+	print "\nSECURITY VIOLATION!!!!\n";
+	print "Root login attempt from:\n";
+	foreach $Host (sort {$a cmp $b} keys %RootLoginAttempt) {
+		print "  $Host : $RootLoginAttempt{$Host} Time(s)\n";
+	}
+}
 
+if ( ( (keys %BadUsers) or (keys %BadPasswds) ) and ($Detail >= 5) ) {
+	print "\nFailed FTP Logins:\n";
+	
+	if ( (keys %BadUsers) and ($Detail >= 5) ) {
+		print "\n  Invalid Username:\n";
+		foreach $User (sort {$a cmp $b} keys %BadUsers) {
+			print "    $User:\n";
+			foreach $Host (sort {$a cmp $b} keys %{$BadUsers{$User}}) {
+				print "      $Host : $BadUsers{$User}{$Host} Time(s)\n";
+			}
+		}
+	}
+	
+	if ( (keys %BadPasswds) and ($Detail >= 5) ) {
+		print "\n  Incorrect Password:\n";
+		foreach $ThisOne (sort {$a cmp $b} keys %BadPasswds) {
+			print $ThisOne . $BadPasswds{$ThisOne} . " Time(s)\n";
+		}
+	}
+	
+	if ( (keys %BadPasswds) and ($Detail >= 5) ) {
+		print "\n  Invalid Shell:\n";
+		foreach $ThisOne (sort {$a cmp $b} keys %BadShell) {
+			print $ThisOne . $BadShell{$ThisOne} . " Time(s)\n";
+		}
+	}
 }
 
 if ( (keys %RefusedPorts) and ($Detail >= 5) ) {
    print "\nRefused PORTs:\n";
-   foreach $ThisOne (keys %RefusedPorts) {
+   foreach $ThisOne (sort {$a cmp $b} keys %RefusedPorts) {
       print $ThisOne . $RefusedPorts{$ThisOne} . " Time(s)\n";
    }
 }
@@ -136,3 +140,4 @@
 
 exit(0);
 
+# vi: shiftwidth=4 tabstop=4
Index: scripts/services/samba
===================================================================
RCS file: /var/cvs/logwatch/scripts/services/samba,v
retrieving revision 1.11
diff -u -r1.11 samba
--- scripts/services/samba	3 Nov 2003 05:07:25 -0000	1.11
+++ scripts/services/samba	26 Nov 2003 13:10:58 -0000
@@ -13,59 +13,96 @@
 
 $Debug = $ENV{'LOGWATCH_DEBUG'};
 $Detail = $ENV{'LOGWATCH_DETAIL_LEVEL'} || 0;
+$SocketReadError=0;
+$DbOpenFail=0;
+$GetDomainMasterStatusFail=0;
 
 if ( $Debug >= 5 ) {
-    print STDERR "\n\nDEBUG: Inside Samba Filter \n\n";
+	print STDERR "\n\nDEBUG: Inside Samba Filter \n\n";
 }
 
 while (defined($ThisLine = <STDIN>)) {
-   chomp($ThisLine);
-   if ( 
-         ($ThisLine =~ /Currently not implemented/) or
-         ($ThisLine =~ /version .+ started/) or
-         ($ThisLine =~ /oplock[_ ]break/) or
-         ($ThisLine =~ /No route to host/) or
-         ($ThisLine =~ /SIGTERM: going down/) or
-         ($ThisLine =~ /response packet id \d+ received with no matching record/) or
-         ($ThisLine =~ /matchname/i) or
-         # Ignore entries in smbmount logfile
-         ($ThisLine =~ /smbmount/) or   
-         ($ThisLine =~ /become_local_master/) or   
-         ($ThisLine =~ /become_domain_master/) or   
-         ($ThisLine =~ /add_domain_logon_names/) or   
-         ($ThisLine =~ /become_logon_server/) or   
-         ($ThisLine =~ /start_async_dns/) or   
-         ($ThisLine =~ /timeout connecting to/) or   
-         ($ThisLine =~ /Operation not permitted/) or
-         ($ThisLine =~ /Record does not exist/) or
-         ($ThisLine =~ /Connection reset by peer/) or
-         ($ThisLine =~ /Multiple .+ responses received for a query/) or
-         ($ThisLine =~ /Connection timed out/) or
-         ($ThisLine =~ /closed connection to/) or
-         ($ThisLine =~ /Got SIGHUP/) or
-         ($ThisLine =~ /current master browser/) or
-	 ($ThisLine =~ /debug_message/)
-      ) {
-      # Don't care about these...
-   } elsif ( ($Host, $Service, $User) = ( $ThisLine =~ /([^ ]+ \([^ ]+\)) connect to service ([^ ]+) as user ([^ ]+)/ ) ) {
-      $Connect{$Service}{$User}{$Host}++;
-   } elsif ( ($NoService) = ( $ThisLine =~ /couldn't find service (\S+)$/ ) ) {
-      $NoServ{$NoService}++;
-   } elsif ($ThisLine =~ s/Denied connection from\s+(\S+)$/$1/) {
-      $Denied{$ThisLine}++;
-   } elsif (($User) = $ThisLine =~ /rejected invalid user ([^ ]+)/ ) {
-      $InvalidUser{$User}++;
-   } elsif (($User) = $ThisLine =~ /Couldn't find user '([^ ]+)'/) {
-      $NotFoundUser{$User}++;
-   } elsif (($User) = $ThisLine =~ /Rejecting user '([^ ]+)'/) {
-      $RejectedUser{$User}++;
-   } elsif ( ( $ThisLine =~ /^\[[^\]]+\] lib\/util_sock.c:read_data\(436\)/ ) ) {
-      # This is due to a nasty bug in samba which causes it to drop connections :-(
-      $SocketReadError++;
-   } else {
-      # Report any unmatched entries...
-      $OtherList{$ThisLine}++;
-   }
+	chomp($ThisLine);
+	if ( 
+		($ThisLine =~ /Currently not implemented/) or
+		($ThisLine =~ /version .+ started/) or
+		($ThisLine =~ /oplock[_ ]break/) or
+		($ThisLine =~ /No route to host/) or
+		($ThisLine =~ /SIGTERM: going down/) or
+		($ThisLine =~ /response packet id \d+ received with no matching record/) or
+		($ThisLine =~ /matchname/i) or
+		# Ignore entries in smbmount logfile
+		($ThisLine =~ /smbmount/) or
+		($ThisLine =~ /become_local_master/) or
+		($ThisLine =~ /become_domain_master/) or
+		($ThisLine =~ /add_domain_logon_names/) or
+		($ThisLine =~ /become_logon_server/) or
+		($ThisLine =~ /start_async_dns/) or
+		($ThisLine =~ /timeout connecting to/) or
+		($ThisLine =~ /Operation not permitted/) or
+		($ThisLine =~ /Record does not exist/) or
+		($ThisLine =~ /Connection reset by peer/) or
+		($ThisLine =~ /Multiple .+ responses received for a query/) or
+		($ThisLine =~ /Connection timed out/) or
+		($ThisLine =~ /closed connection to/) or
+		($ThisLine =~ /Got SIGHUP/) or
+		($ThisLine =~ /current master browser/) or
+		($ThisLine =~ /debug_message/) or
+		($ThisLine =~ /===============================================================/)
+	) {
+		#Don't care about these...
+	} elsif ( ($Host, $Service, $User) = ( $ThisLine =~ /([^ ]+ \([^ ]+\)) connect to service ([^ ]+) as user ([^ ]+)/ ) ) {
+		$Connect{$Service}{$User}{$Host}++;
+	} elsif ( ($NoService) = ( $ThisLine =~ /couldn't find service (\S+)/ ) ) {
+		$NoServ{$NoService}++;
+	} elsif ($ThisLine =~ s/Denied connection from\s+(\S+)$/$1/) {
+		$Denied{$ThisLine}++;
+	} elsif ( ($Ip,$Name,$Group,$Subnet) = ($ThisLine =~ /Denied connection from  \(([^ ]+)\)  Samba name server ([^ ]+) is now a local master browser for workgroup ([^ ]+) on subnet ([^ ]+)/ ) ) {
+		$Denied{$Ip}++;
+		$BeLocalMaster{$Subnet}{$Group}{$Name}++;
+	} elsif (($User) = $ThisLine =~ /rejected invalid user ([^ ]+)/ ) {
+		$InvalidUser{$User}++;
+	} elsif (($User) = $ThisLine =~ /Couldn't find user '([^ ]+)'/) {
+		$NotFoundUser{$User}++;
+	} elsif (($User) = $ThisLine =~ /Rejecting user '([^ ]+)'/) {
+		$RejectedUser{$User}++;
+	} elsif ( ( $ThisLine =~ /^\[[^\]]+\] lib\/util_sock.c:read_data\(436\)/ ) ) {
+		# This is due to a nasty bug in samba which causes it to drop connections :-(
+		$SocketReadError++;
+	} elsif ( ( $ThisLine =~ /unable to open passdb database.$/ ) ) {
+		$DbOpenFail++;
+	} elsif ( ($Server,$Ip,$Group) = ($ThisLine =~ /Server ([^ ]+) at IP ([^ ]+) is announcing itself as a local master browser for workgroup ([^ ]+) and we think we are master. Forcing election.$/ ) ) {
+		$Temp = $Server . "(" . $Ip . ")";
+		$ForceElection{$Group}{$Temp}++;
+	} elsif ( ($Server,$Ip,undef) = ($ThisLine =~ /process_name_refresh_request: unicast name registration request received for name ([^ ]+) from IP ([^ ]+) on subnet ([^ ]+)./ ) ) {
+		$Temp = "$Server ($Ip)";
+		$UnicastRegister{$Temp}++;
+	} elsif ( ($Group,$Subnet) = ($ThisLine =~ /standard_fail_register: Failed to register\/refresh name ([^ ]+) on subnet ([^ ]+)$/ ) ) {
+		$FailedRegister{$Subnet}{$Group}++;
+	} elsif ( ($Ip,$Group,undef) = ($ThisLine =~ /register_name_response: server at IP ([^ ]+) rejected our name registration of ([^ ]+) with error code ([^ ]+)\.$/ ) ) {
+		$RejectRegister{$Group}{$Ip}++;
+	} elsif ( ($Ip) = ($ThisLine =~ /get_domain_master_name_node_status_fail:  Doing a node status request to the domain master browser at IP ([^ ]+) failed\.  Cannot get workgroup name\.$/ ) ) {
+		$CantGetGroup{$Ip}++;
+	} elsif ( ($Signal,undef,$Version) = ($ThisLine =~ /INTERNAL ERROR: Signal ([^ ]+) in pid ([^ ]+) \(([^ ]+)\)  Please read the file BUGS.txt in the distribution$/ ) ) {
+		$Temp = "Version $Version with signal $Signal";
+		$Crash{$Temp}++;
+	} elsif ( ( $ThisLine =~ /get_domain_master_name_node_status_fail\(([^ ]+)\)/ ) ) {
+		$GetDomainMasterStatusFail++;
+	} else {
+		# Report any unmatched entries...
+		$OtherList{$ThisLine}++;
+	}
+}
+
+#########################################
+#
+
+if (%Crash) {
+	print "\nWARNING!!!!!!\n";
+	print "Server crashed:\n";
+	foreach $Dead (sort {$a cmp $b} keys %Crash) {
+		print "   $Dead : $Crash{$Dead} Time(s)\n";
+	}
 }
 
 if (($Detail >= 5) and (keys %Connect)) {
@@ -88,6 +125,40 @@
    }
 }
 
+if (keys %ForceElection) {
+	print "\nForced Election:\n";
+	foreach $Group (sort {$a cmp $b} keys %ForceElection) {
+		print "   In workgroup $Group when announced server was:\n";
+		foreach $Host (sort {$a cmp $b} keys %{$ForceElection{$Group}}) {
+			print "      $Host : $ForceElection{$Group}{$Host} Time(s)\n";
+		}
+	}
+}
+
+if (keys %BeLocalMaster) {
+	print "\nChanged Local Master Browser:\n";
+	foreach $Subnet (sort {$a cmp $b} keys %BeLocalMaster) {
+		print "   On subnet $Subnet:\n";
+		foreach $Group (sort {$a cmp $b} keys %{$BeLocalMaster{$Subnet}}) {
+			print "      For workgroup $Group:\n";
+			foreach $Name (sort {$a cmp $b} keys %{$BeLocalMaster{$Subnet}{$Group}}) {
+				print "         $Name : $BeLocalMaster{$Subnet}{$Group}{$Name} Time(s)\n";
+			}
+		}
+	}
+}
+
+if (keys %CantGetGroup) {
+	print "\nCannot get workgroup name from domain name browser:\n";
+	foreach $Ip (sort {$a cmp $b} keys %CantGetGroup) {
+		print "   $Ip : $CantGetGroup{$Ip} Time(s)\n";
+	}
+}
+
+if ($GetDomainMasterStatusFail > 0) {
+	print "\nFailed to get Domain Master node name: $GetDomainMasterStatusFail Time(s)\n";
+}
+
 if (($Detail >= 5) and (keys %NoServ)) {
    print "\nCouldn't find services:\n";
    foreach $ThisOne (sort {$a cmp $b} keys %NoServ) {
@@ -95,11 +166,35 @@
    }
 }
 
-if (keys %OtherList) {
-   print "\n**Unmatched Entries**\n";
-   foreach $Line (sort {$a cmp $b} keys %OtherList) {
-      print "$Line : $OtherList{$Line} Time(s)\n";
-   }
+if (($Detail >= 5) and (keys %UnicastRegister)) {
+	print "\nUnicast name registration requests:\n";
+	foreach $ThisOne (sort {$a cmp $b} keys %UnicastRegister) {
+		print "   $ThisOne : $UnicastRegister{$ThisOne} Time(s)\n";
+	}
+}
+
+if (keys %FailedRegister) {
+	print "\nFailed to register/refresh:\n";
+	foreach $Subnet (sort {$a cmp $b} keys %FailedRegister) {
+		print "   On subnet $Subnet:\n";
+		foreach $Group (sort {$a cmp $b} keys %{$FailedRegister{$Subnet}}) {
+			print "      $Group : $FailedRegister{$Subnet}{$Group} Time(s)\n";
+		}
+	}
+}
+
+if (keys %RejectRegister) {
+	print "\nRejected our name registration:\n";
+	foreach $Group (sort {$a cmp $b} keys %RejectRegister) {
+		print "   Name $Group at IP:\n";
+		foreach $Ip (sort {$a cmp $b} keys %{$RejectRegister{$Group}}) {
+			print "      $Ip : $RejectRegister{$Group}{$Ip} Time(s)\n";
+		}
+	}
+}
+
+if ($DbOpenFail > 0) {
+	print "\nFailed to open passwd database: $DbOpenFail Time(s)\n";
 }
 
 if (keys %InvalidUser) {
@@ -124,8 +219,16 @@
 }
 
 if ($SocketReadError > 0) {
-   print "\nSocket Read Error (Samba bug): $SocketReadError Time(s)\n";
+	print "\nSocket Read Error (Samba bug): $SocketReadError Time(s)\n";
+}
+
+if (keys %OtherList) {
+	print "\n**Unmatched Entries**\n";
+	foreach $Line (sort {$a cmp $b} keys %OtherList) {
+		print "$Line : $OtherList{$Line} Time(s)\n";
+	}
 }
 
 exit(0);
 
+# vi: shiftwidth=4 tabstop=4
Index: scripts/services/secure
===================================================================
RCS file: /var/cvs/logwatch/scripts/services/secure,v
retrieving revision 1.37
diff -u -r1.37 secure
--- scripts/services/secure	18 Nov 2003 14:04:06 -0000	1.37
+++ scripts/services/secure	26 Nov 2003 13:10:59 -0000
@@ -19,14 +19,25 @@
 use Logwatch ':ip';
 
 while (defined($ThisLine = <STDIN>)) {
-   chomp($ThisLine);
-   $ThisLine =~ s/^... .. ..:..:.. [^ ]+ //;
-   my $temp = $ThisLine;
-   $temp =~ s/^([^[]+).*/$1/;
-   if ($Ignore =~ /\b\Q$temp\E\b/i) { next; }
-   if ( ($Host,$User) = ($ThisLine =~ /^login: FAILED LOGIN \d+ FROM ([^ ]+) FOR ([^,]+),/ ) ) {
-      $FailedLogins->{$User}->{$Host}++;
-   } elsif ( ($Service,$IP) = ($ThisLine =~ /^([^ ]+)\[\d+\]: connect(ion)? from "?(\d+\.\d+\.\d+\.\d+).*/) ) {
+	chomp($ThisLine);
+	$ThisLine =~ s/^... .. ..:..:.. [^ ]+ //;
+	my $temp = $ThisLine;
+	$temp =~ s/^([^[]+).*/$1/;
+	if ($Ignore =~ /\b\Q$temp\E\b/i) { next; }
+	if (
+		( $ThisLine =~ m/^[^ ]+\[\d+\]: connect from localhost$/ ) or
+		( $ThisLine =~ /^\/usr\/bin\/sudo:/) or
+		( $ThisLine =~ /^sudo:/) or
+		( $ThisLine =~ /^passwd\[\d+\]:/) or
+		( $ThisLine =~ /warning: can.t get client address: Connection refused/) or
+		( $ThisLine =~ /^xinetd\[\d+\]: USERID: ([^ ]+) (.+)$/ ) or
+		( $ThisLine =~ /^(xinetd|xinetd-ipv6)\[\d+\]: EXIT: ([^ ]+) pid=\d+/)
+	)
+	{
+		# Ignore these entries
+	} elsif ( ($Host,$User) = ($ThisLine =~ /^login: FAILED LOGIN \d+ FROM ([^ ]+) FOR ([^,]+),/ ) ) {
+		$FailedLogins->{$User}->{$Host}++;
+	} elsif ( ($Service,$IP) = ($ThisLine =~ /^([^ ]+)\[\d+\]: connect(ion)? from "?(\d+\.\d+\.\d+\.\d+).*/) ) {
       $Name = LookupIP($IP);
       if ($Summarize =~ /\Q$Service\E/) { 
          $Connections->{$Service}++;
@@ -53,12 +64,8 @@
 		  }
 	  } elsif ( ($Display, $User) = ($ThisLine =~ /^xscreensaver\[\d+\]: FAILED LOGIN \d ON DISPLAY \"([^ ]+)\", FOR \"([^ ]+)\"$/) ) {
 	      $FailedSaver->{$User}->{$Display}++;
-   } elsif ( (undef, $Service) = ($ThisLine =~ /^(xinetd|xinetd-ipv6)\[\d+\]: EXIT: ([^ ]+) pid=\d+/) ) {
-      #ignore...
    } elsif ( $ThisLine =~ s/^([^ ]+)\[\d+\]: warning: can\'t get client address: No route to host$/$1/ ) {
       $NoIP->{$ThisLine}++;
-   } elsif ( $ThisLine =~ m/^[^ ]+\[\d+\]: connect from localhost$/ ) {
-      #ignore...
    } elsif ( $ThisLine =~ s/^([^ ]+)\[\d+\]: warning: can\'t get client address: Network is unreachable$/$1/ ) {
       $NoIP->{$ThisLine}++;
    } elsif ( $ThisLine =~ s/^([^ ]+)\[\d+\]: warning: can\'t get client address: Connection reset by peer$/$1/ ) {
@@ -71,8 +78,6 @@
       $Error{$Service}{$Err}++;
    } elsif ( ($Service,$Err) = ($ThisLine =~ /^([^ ]+): (FAILED LOGIN SESSION FROM [^ ]+ FOR , .*)$/ ) ) {
       $Error{$Service}{$Err}++;
-   } elsif ( $ThisLine =~ /warning: can.t get client address: Connection refused/) {
-      # Nothing
    } elsif ( $ThisLine =~ /^login: ROOT LOGIN ON tty[0-9]+/) {
       $RootLoginTTY++
    } elsif ( $ThisLine =~ s/^userdel\[\d+\]: delete user `(.+)'/$1/ ) {
@@ -85,33 +90,30 @@
       push @DeletedGroups, "   $ThisLine\n";
    } elsif ( $ThisLine =~ s/^(useradd|adduser)\[\d+\]: new group: name=(.+), gid=(\d+).*$/$1 ($2)/ ) {
       push @NewGroups, "   $ThisLine\n";
-   } elsif ( $ThisLine =~ s/^groupadd\[\d+\]: new group: name=(.+), gid=(\d+).*$/$1 ($2)/ ) {
-      push @NewGroups, "   $ThisLine\n";
-   } elsif ( $ThisLine =~ /^userdel\[\d+\]: delete `(.*)' from (shadow|group) `(.*)'\s*$/ ) {
-     push @RemoveFromGroup, "    user $1 from group $3\n";
-   } elsif ( $ThisLine =~ /^xinetd\[\d+\]: USERID: ([^ ]+) (.+)$/ ) {
-      # This is an inetd lookup... $1 is the service (i.e. ftp), $2 is the response
-      # I don't think these are important to log at this time
-   } elsif ( $ThisLine =~ /^sudo: ([^\s]+) : (command not allowed)?.+ ; COMMAND=(.*)$/ ) {
-      # sudo unauthorized commands
-        push @SudoList, "$1: $3\n" unless ($2 eq "");
-   } elsif ( $ThisLine =~ /^sudo:/) {
-      # Ignore other sudo entries as they are handled by the sudo filter
-   } elsif ( $ThisLine =~ /^\/usr\/bin\/sudo: ([^\s]+) : (command not allowed)?.+ ; COMMAND=(.*)$/ ) {
-      # sudo unauthorized commands
-        push @SudoList, "$1: $3\n" unless ($2 eq "");
-   } elsif ( $ThisLine =~ /^\/usr\/bin\/sudo:/) {
-      # Ignore other sudo entries as they are handled by the sudo filter
-   } elsif ( ($service, $from) = ($ThisLine =~ /^xinetd\[\d+\]: FAIL: (.+) (?:address|libwrap) from=([\d.]+)/)) {
-      $Refused->{$service}->{$from}++;
-   } else {
-      # Unmatched entries...
-      push @OtherList, "$ThisLine\n";
-   }
+  } elsif ( ($User,$Group) =~ /useradd\[\d+\]: add `([^ ]+)' to group `([^ ]+)'$/ ) {
+	  $AddToGroup{$Group}{$User}++;
+  } elsif ( $ThisLine =~ s/^groupadd\[\d+\]: new group: name=(.+), gid=(\d+).*$/$1 ($2)/ ) {
+	  push @NewGroups, "   $ThisLine\n";
+  } elsif ( $ThisLine =~ /^userdel\[\d+\]: delete `(.*)' from (shadow|group) `(.*)'\s*$/ ) {
+	  push @RemoveFromGroup, "    user $1 from group $3\n";
+	  # This is an inetd lookup... $1 is the service (i.e. ftp), $2 is the response
+	  # I don't think these are important to log at this time
+  } elsif ( $ThisLine =~ /^sudo: ([^\s]+) : (command not allowed)?.+ ; COMMAND=(.*)$/ ) {
+	  # sudo unauthorized commands
+	  push @SudoList, "$1: $3\n" unless ($2 eq "");
+  } elsif ( $ThisLine =~ /^\/usr\/bin\/sudo: ([^\s]+) : (command not allowed)?.+ ; COMMAND=(.*)$/ ) {
+	  # sudo unauthorized commands
+	  push @SudoList, "$1: $3\n" unless ($2 eq "");
+  } elsif ( ($service, $from) = ($ThisLine =~ /^xinetd\[\d+\]: FAIL: (.+) (?:address|libwrap) from=([\d.]+)/)) {
+	  $Refused->{$service}->{$from}++;
+  } else {
+	  # Unmatched entries...
+	  push @OtherList, "$ThisLine\n";
+  }
 }
 
 if (@NewUsers) {
-   print "\nNew Users:\n@NewUsers\n";
+	print "\nNew Users:\n@NewUsers\n";
 }
 
 if (@DeletedUsers) {
@@ -124,6 +126,16 @@
 
 if (@DeletedGroups) {
    print "\nDeleted Groups:\n@DeletedUsers\n";
+}
+
+if (keys %AddToGroup) {
+	print "\nAdded User to group:\n";
+	foreach $Group (sort {$a cmp $b} keys %AddToGroup) {
+		print "   Group $Group:\n";
+		foreach $User (sort {$a cmp $b} keys %{$AddToGroup{$User}}) {
+			print "      $User\n";
+		}
+	}
 }
 
 if (@RemoveFromGroup) {
Index: scripts/services/sendmail
===================================================================
RCS file: /var/cvs/logwatch/scripts/services/sendmail,v
retrieving revision 1.29
diff -u -r1.29 sendmail
--- scripts/services/sendmail	7 Nov 2003 14:26:42 -0000	1.29
+++ scripts/services/sendmail	26 Nov 2003 13:11:00 -0000
@@ -109,69 +109,69 @@
 my $UnknownUsersThreshold = 0;
 
 while (defined($ThisLine = <STDIN>)) {
-   ($QueueID) = ($ThisLine =~ m/^([a-zA-Z0-9]+): / );
-   $ThisLine =~ s/^[a-zA-Z0-9]+: //;
-   if (  ( $ThisLine =~ m/^alias database [^ ]* (auto)?rebuilt by/ ) or
-         ( $ThisLine =~ m/[0-9]* aliases, longest [0-9]* bytes, [0-9]* bytes total/ ) or 
-         ( $ThisLine =~ m/^starting daemon (.*):/ ) or 
-         ( $ThisLine =~ m/premature EOM/ ) or 
-         ( $ThisLine =~ m/unexpected close on connection from/ ) or 
-         ( $ThisLine =~ m/timeout waiting for input from/ ) or 
-         ( $ThisLine =~ m/lost input channel from/ ) or 
-         ( $ThisLine =~ m/DSN: Cannot send message for \d+ day/ ) or 
-         ( $ThisLine =~ m/: Service unavailable$/) or 
-         ( $ThisLine =~ m/Broken pipe|Connection (reset|timed out)/ ) or
-         ( $ThisLine =~ m/X-Spam/ ) or
-         ( $ThisLine =~ m/Milter message: body replaced/ ) or
-         ( $ThisLine =~ m/Milter: data/ ) or
-         ( $ThisLine =~ m/Milter change: header/ ) or
-         ( $ThisLine =~ m/Milter delete: header/ ) or
-         ( $ThisLine =~ m/Milter add: header: X-Virus-Scanned: by amavis/ ) or
-         ( $ThisLine =~ m/AUTH=server, relay=/ ) or
-         ( $ThisLine =~ m/discarded/ ) or
-         ( $ThisLine =~ m/headers too large/ ) or
-         ( $ThisLine =~ m/^clone [a-zA-Z0-9]+, owner=/ ) ) {
-      # We don't care about these
-   } elsif ( ($FromUser, $FromDomain, $Bytes, $NumRcpts, $RelayHost) = ($ThisLine =~ /^from=[\<]?([^@]+)[@]?([^\> ]+).*size=([0-9]+).*nrcpts=([0-9]+).*relay=(\[[0-9\.]+\]|[^ ]* \[[0-9\.]+\]|[^ ]+).*$/) ) {
-      if ($NumRcpts > 0) {
-         $MsgsSent++;
-         $TotalRcpts += $NumRcpts;
-         $BytesTransferred += $Bytes;
-         $MailBomber{$RelayHost} += $NumRcpts;
-         $MailBomberConn{$RelayHost}++;
-
-         if ($Bytes <= 10240) {
-            $SizeDist[0]{'Num'}++;
-            $SizeDist[0]{'Bytes'} += $Bytes;
-         } elsif ($Bytes <= 20480) {
-            $SizeDist[1]{'Num'}++;
-            $SizeDist[1]{'Bytes'} += $Bytes;
-         } elsif ($Bytes <= 51200) {
-            $SizeDist[2]{'Num'}++;
-            $SizeDist[2]{'Bytes'} += $Bytes;
-         } elsif ($Bytes <= 102400) {
-            $SizeDist[3]{'Num'}++;
-            $SizeDist[3]{'Bytes'} += $Bytes;
-         } elsif ($Bytes <= 512000) {
-            $SizeDist[4]{'Num'}++;
-            $SizeDist[4]{'Bytes'} += $Bytes;
-         } elsif ($Bytes <= 1048576) {
-            $SizeDist[5]{'Num'}++;
-            $SizeDist[5]{'Bytes'} += $Bytes;
-         } elsif ($Bytes <= 2097152) {
-            $SizeDist[6]{'Num'}++;
-            $SizeDist[6]{'Bytes'} += $Bytes;
-         } elsif ($Bytes <= 5242880) {
-            $SizeDist[7]{'Num'}++;
-            $SizeDist[7]{'Bytes'} += $Bytes;
-         } elsif ($Bytes <= 10485760) {
-            $SizeDist[8]{'Num'}++;
-            $SizeDist[8]{'Bytes'} += $Bytes;
-         } else {
-            $SizeDist[9]{'Num'}++;
-            $SizeDist[9]{'Bytes'} += $Bytes;
-         }
-      }
+	($QueueID) = ($ThisLine =~ m/^([a-zA-Z0-9]+): / );
+	$ThisLine =~ s/^[a-zA-Z0-9]+: //;
+	if (  ( $ThisLine =~ m/^alias database [^ ]* (auto)?rebuilt by/ ) or
+		( $ThisLine =~ m/[0-9]* aliases, longest [0-9]* bytes, [0-9]* bytes total/ ) or 
+		( $ThisLine =~ m/^starting daemon (.*):/ ) or 
+		( $ThisLine =~ m/premature EOM/ ) or 
+		( $ThisLine =~ m/unexpected close on connection from/ ) or 
+		( $ThisLine =~ m/timeout waiting for input from/ ) or 
+		( $ThisLine =~ m/lost input channel from/ ) or 
+		( $ThisLine =~ m/DSN: Cannot send message for \d+ day/ ) or 
+		( $ThisLine =~ m/: Service unavailable$/) or 
+		( $ThisLine =~ m/Broken pipe|Connection (reset|timed out)/ ) or
+		( $ThisLine =~ m/X-Spam/ ) or
+		( $ThisLine =~ m/Milter message: body replaced/ ) or
+		( $ThisLine =~ m/Milter: data/ ) or
+		( $ThisLine =~ m/Milter change: header/ ) or
+		( $ThisLine =~ m/Milter delete: header/ ) or
+		( $ThisLine =~ m/Milter add: header: X-Virus-Scanned: by amavis/ ) or
+		( $ThisLine =~ m/AUTH=server, relay=/ ) or
+		( $ThisLine =~ m/discarded/ ) or
+		( $ThisLine =~ m/headers too large/ ) or
+		( $ThisLine =~ m/^clone [a-zA-Z0-9]+, owner=/ ) ) {
+		# We don't care about these
+	} elsif ( ($FromUser, $FromDomain, $Bytes, $NumRcpts, $RelayHost) = ($ThisLine =~ /^from=[\<]?([^@]+)[@]?([^\> ]+).*size=([0-9]+).*nrcpts=([0-9]+).*relay=(\[[0-9\.]+\]|[^ ]* \[[0-9\.]+\]|[^ ]+).*$/) ) {
+		if ($NumRcpts > 0) {
+			$MsgsSent++;
+			$TotalRcpts += $NumRcpts;
+			$BytesTransferred += $Bytes;
+			$MailBomber{$RelayHost} += $NumRcpts;
+			$MailBomberConn{$RelayHost}++;
+			
+			if ($Bytes <= 10240) {
+				$SizeDist[0]{'Num'}++;
+				$SizeDist[0]{'Bytes'} += $Bytes;
+			} elsif ($Bytes <= 20480) {
+				$SizeDist[1]{'Num'}++;
+				$SizeDist[1]{'Bytes'} += $Bytes;
+			} elsif ($Bytes <= 51200) {
+				$SizeDist[2]{'Num'}++;
+				$SizeDist[2]{'Bytes'} += $Bytes;
+			} elsif ($Bytes <= 102400) {
+				$SizeDist[3]{'Num'}++;
+				$SizeDist[3]{'Bytes'} += $Bytes;
+			} elsif ($Bytes <= 512000) {
+				$SizeDist[4]{'Num'}++;
+				$SizeDist[4]{'Bytes'} += $Bytes;
+			} elsif ($Bytes <= 1048576) {
+				$SizeDist[5]{'Num'}++;
+				$SizeDist[5]{'Bytes'} += $Bytes;
+			} elsif ($Bytes <= 2097152) {
+				$SizeDist[6]{'Num'}++;
+				$SizeDist[6]{'Bytes'} += $Bytes;
+			} elsif ($Bytes <= 5242880) {
+				$SizeDist[7]{'Num'}++;
+				$SizeDist[7]{'Bytes'} += $Bytes;
+			} elsif ($Bytes <= 10485760) {
+				$SizeDist[8]{'Num'}++;
+				$SizeDist[8]{'Bytes'} += $Bytes;
+			} else {
+				$SizeDist[9]{'Num'}++;
+				$SizeDist[9]{'Bytes'} += $Bytes;
+			}
+		}
 
       # Add The message to a hash for later per-domain analysis.
       $Msgs{$QueueID}{"Relay"} = $RelayHost;
@@ -305,7 +305,7 @@
    #h2GHtSx30926: SYSERR(root): Too many hops 26 (25 max): from <MAILER-DAEMON@atbusiness.com> via localhost, to <superstore@bpsmailer.com>
    } elsif ( ($Temp)  = ($ThisLine =~ /^.*?Too many hops (.*)/) ) {
        $TooManyHops{$Temp}++;
-   } elsif ( ($Warning)  = ($ThisLine =~ /Authentication-Warning: [^ ]+: ([^ ]+ set sender to  [^ ]+ using -f|.+ didn\'t use HELO protocol|[^ ]+ owned process doing -bs)/) ) {
+   } elsif ( ($Warning)  = ($ThisLine =~ /Authentication-Warning: [^ ]+: ([^ ]+ set sender to ( |)[^ ]+ using -f|.+ didn\'t use HELO protocol|[^ ]+ owned process doing -bs)/) ) {
       $AuthWarns{$Warning}++;
    } elsif ( ($Forward,$Error) = ($ThisLine =~ /^forward ([^ ]*): transient error: (.*)$/) ) {
       $Temp = $Forward . ": " . $Error;
@@ -319,7 +319,7 @@
    } elsif ( $ThisLine =~ m/(return to sender|sender notify): Cannot send message for (\d) days/ ) {
       $NumDays = $2;
       $DaysReturns++;
-   } elsif ( ( $NOQUEUE ) = ($ThisLine =~ /\[([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)\] (\(may be forged\) |)did not issue MAIL\/EXPN\/VRFY\/ETRN during connection to MTA/) ) {
+   } elsif ( ( $NOQUEUE ) = ($ThisLine =~ /\[([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)\] (\(may be forged\) |)did not issue MAIL\/EXPN\/VRFY\/ETRN during connection to (MTA|Daemon0)/) ) {
       $Noqueuers{$NOQUEUE}++;
    } elsif ($ThisLine=~ /relay=(\S+)*.*\[(\d+.\d+.\d+.\d+)\], reject=444 4.4.4 \<([^\>]+)\>... Sorry (\S*)/) {
       chomp($host=$2." ". (defined($1) ? "(".$1.")" : "(unresolved)") );
@@ -368,13 +368,15 @@
       $ReturnReceipt++;
    } elsif ($ThisLine=~ /Remote protocol error/) {
       $RemoteProtocolError++;
-   } else {
-      $ThisLine =~ s/.*\: (DSN\: .*)/$1/;   
-      $ThisLine =~ s/.*\: (postmaster notify\: .*)/$1/;
-      chomp($ThisLine);
-      # Report any unmatched entries...
-      $OtherList{$ThisLine}++; 
-   }
+  } elsif ( ($Host,$Attack) = ($ThisLine =~ /POSSIBLE ATTACK from ([^ ]+): ([^ ]+)$/) ) {
+	  $AttackAttempt{$Host}{$Attack}++;
+  } else {
+	  $ThisLine =~ s/.*\: (DSN\: .*)/$1/;
+	  $ThisLine =~ s/.*\: (postmaster notify\: .*)/$1/;
+	  chomp($ThisLine);
+	  # Report any unmatched entries...
+	  $OtherList{$ThisLine}++; 
+  }
 }
 
 if ($MsgsSent > 0) {
@@ -420,7 +422,18 @@
 }
 
 if($ReturnReceipt > 0) {
-   print "\n\n" . $ReturnReceipt . " Return Receipt's";
+	print "\n\n" . $ReturnReceipt . " Return Receipt's";
+}
+
+if (keys %AttackAttempt) {
+	print "\nWARNING!!!!\n";
+	print "Possible Attack:\n";
+	foreach $Host (sort {$a cmp $b} keys %AttackAttempt) {
+		print "   Attempt from $Host with:\n";
+		foreach $Attack (sort {$a cmp $b} keys %{$AttackAttempt{$Host}}) {
+			print "      $Attack : $AttackAttempt{$Host}{$Attack} Time(s)\n";
+		}
+	}
 }
 
 if (($Detail >= 10) and (keys %LocalDomains)) {
@@ -729,3 +742,4 @@
 
 exit(0);
 
+# vi: shiftwidth=4 tabstop=4
Index: scripts/services/sshd
===================================================================
RCS file: /var/cvs/logwatch/scripts/services/sshd,v
retrieving revision 1.30
diff -u -r1.30 sshd
--- scripts/services/sshd	3 Nov 2003 14:30:40 -0000	1.30
+++ scripts/services/sshd	26 Nov 2003 13:11:01 -0000
@@ -18,30 +18,30 @@
 
 # Avoid "Use of uninitialized value" warning messages.
 sub ValueOrDefault {
-   my ($value, $default) = @_;
-   return ($value ? $value : $default);
+	my ($value, $default) = @_;
+	return ($value ? $value : $default);
 }
 
 # No sense in running if 'sshd' doesn't even exist on this system...
 unless (( -f "/usr/sbin/sshd" ) or ( -f "/usr/local/sbin/sshd")) {
-   exit (0);
+	exit (0);
 }
 
 my $sftpRequests = 0;
 
 if ( $Debug >= 5 ) {
-   print STDERR "\n\nDEBUG: Inside SSHD Filter \n\n";
-   $DebugCounter = 1;
+	print STDERR "\n\nDEBUG: Inside SSHD Filter \n\n";
+	$DebugCounter = 1;
 }
 
 while (defined($ThisLine = <STDIN>)) {
-   if ( $Debug >= 5 ) {
-      print STDERR "DEBUG($DebugCounter): $ThisLine";
-      $DebugCounter++;
-   }
-   chomp($ThisLine);
-   if ( 
-        ($ThisLine =~ m/^connect from \d+\.\d+\.\d+\.\d+/) or 
+	if ( $Debug >= 5 ) {
+		print STDERR "DEBUG($DebugCounter): $ThisLine";
+		$DebugCounter++;
+	}
+	chomp($ThisLine);
+	if ( 
+		($ThisLine =~ m/^connect from \d+\.\d+\.\d+\.\d+/) or 
         ($ThisLine =~ m/Read from socket failed/)
       ) {
       # Ignore these
@@ -50,16 +50,16 @@
          print STDERR "DEBUG: Found -$2 logged in from $3 using $1\n";
       }
       if ($Detail >= 20) {
-	  $Users{$2}{$3}{$1}++;
-      } else {
-	  $Users{$2}{$3}{"(all)"}++;
-      }
-   } elsif ( $ThisLine =~ m/^Failed (\S+) for (\S+) from ([\d.]+) port (\d+)/ ) { #openssh
+		  $Users{$2}{$3}{$1}++;
+	  } else {
+		  $Users{$2}{$3}{"(all)"}++;
+	  }
+   } elsif ( $ThisLine =~ m/^Failed (\S+) for (\S+) from ([^ ]+) port (\d+)/ ) { #openssh
       if ( $Debug >= 5 ) {
          print STDERR "DEBUG: Found -Failed login- line\n";
       }
       $BadLogins{"$2/$1 from $3"}++;
-   } elsif ( $ThisLine =~ m/^Failed (\S+) for illegal user (\S+) from ([\d.]+) port (\d+)/ ) { #openssh
+   } elsif ( $ThisLine =~ m/^Failed (\S+) for illegal user (\S+) from ([^ ]+) port (\d+)/ ) { #openssh
       $BadLogins{"$2/$1 from $3"}++;
    } elsif ( $ThisLine =~ m/^Illegal user (\S+) from ([\d.]+)/ ) { #redhat thing
       $IllegalUsers{"$1/none from $2"}++;
@@ -91,7 +91,7 @@
    } elsif ($ThisLine =~ m/^Disconnecting: Command terminated on signal \d+/) {
       # openssh emits thse, but they're not kills, oddly.
    }
-   elsif ( $ThisLine =~ m/^(log: )?Server listening on( [\d\.]+)? port \d+/ ) { #ssh/openssh
+   elsif ( $ThisLine =~ m/^(log: )?Server listening on( [^ ]+)? port \d+/ ) { #ssh/openssh
       $Starts++;
       if ( $Debug >= 5 ) {
          print STDERR "DEBUG: Found -Listening on port 22- line\n";
@@ -242,3 +242,4 @@
 
 exit(0);
 
+# vi: shiftwidth=4 tabstop=4
