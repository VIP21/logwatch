Index: scripts/services/secure
===================================================================
RCS file: /var/cvs/logwatch/scripts/services/secure,v
retrieving revision 1.44
diff -u -r1.44 secure
--- scripts/services/secure	3 Feb 2004 04:26:36 -0000	1.44
+++ scripts/services/secure	20 May 2004 07:19:29 -0000
@@ -31,6 +31,8 @@
 $Ignore = $ENV{'ignore_services'};
 $Summarize = $ENV{'summarize_connections'};
 $ConsoleLock = 0;
+$spop3d_opened=0;
+$spop3d_errors=0;
 use Logwatch ':ip';
 
 while (defined($ThisLine = <STDIN>)) {
@@ -47,12 +49,28 @@
       ( $ThisLine =~ /^sudo:/) or
       ( $ThisLine =~ /^halt:/) or
       ( $ThisLine =~ /^reboot:/) or
+      ( $ThisLine =~ /^pam_xauth\[\d+\]: call_xauth: child returned \d/) or
       ( $ThisLine =~ /^passwd\[\d+\]:/) or
       ( $ThisLine =~ /warning: can.t get client address: Connection refused/) or
       ( $ThisLine =~ /^xinetd\[\d+\]: USERID: ([^ ]+) (.+)$/ ) or
       ( $ThisLine =~ /^(xinetd|xinetd-ipv6)\[\d+\]: EXIT: ([^ ]+) pid=\d+/)
    ) {
       # Ignore these entries
+    } elsif ($ThisLine =~ /^spop3d/) {
+       @line=split(": ",$ThisLine);
+       if ($line[1]=~/^session opened for user/) {
+          $spop3d_opened++;
+          @bzz=split(" ",$line[1]);
+          $PopUser= $bzz[4];
+          $PopLogin{$PopUser}++;
+       } if ($line[1]=~/^authentication failure;/) {
+#   authentication failure; logname= uid=0 euid=0 tty= 
+#     ruser= rhost=  user=xavier
+          $spop3d_errors++;
+          @bzz=split(" user=",$line[1]);
+          $PopErr=$bzz[1];
+          $PopErrors{$PopErr}++;
+       }
    } elsif ( ($Host,$User) = ($ThisLine =~ /^login: FAILED LOGIN \d+ FROM ([^ ]+) FOR ([^,]+),/ ) ) {
       $FailedLogins->{$User}->{$Host}++;
    } elsif ( ($Service,$IP) = ($ThisLine =~ /^([^ ]+)\[\d+\]: connect(ion)? from "?(\d+\.\d+\.\d+\.\d+).*/) ) {
@@ -90,6 +108,10 @@
          $Name = LookupIP($IP);
          $Connections->{$Service}->{$Name}++;
       }
+   } elsif ( ($Service,undef,$Name) = ($ThisLine =~ /^([^ ]+)\[\d+\]: warning: ([^ ]+), line \d+: can't verify hostname: getaddrinfo\(([^ ]+), AF_INET\) failed$/) ) {
+      $NameVerifyFail{$Service}{$Name}++;
+   } elsif ( ($Service,undef,$Name,$IP) = ($ThisLine =~ /^([^ ]+)\[\d+\]: warning: ([^ ]+), line \d+: host name\/name mismatch: ([^ ]+) != ([^ ]+)$/) ) {
+      $NameVerifyFail{$Service}{"$Name != $IP"}++;
    } elsif ( ($Display, $User) = ($ThisLine =~ /^xscreensaver\[\d+\]: FAILED LOGIN \d ON DISPLAY \"([^ ]+)\", FOR \"([^ ]+)\"$/) ) {
       $FailedSaver{$User}{$Display}++;
    } elsif ( $ThisLine =~ s/^([^ ]+)\[\d+\]: warning: can\'t get client address: No route to host$/$1/ ) {
@@ -108,7 +130,7 @@
       $Error{$Service}{$Err}++;
    } elsif ( ($Service,$Err) = ($ThisLine =~ /^([^ ]+): (password mismatch for [^ ]+ in [^ ]+):.*$/ ) ) {
       $Error{$Service}{$Err}++;
-   } elsif ( $ThisLine =~ /^login: ROOT LOGIN/) {
+   } elsif ( $ThisLine =~ /^login: ROOT LOGIN ON tty[0-9]+/) {
       $RootLoginTTY++
    } elsif ( (undef,$User) = ($ThisLine =~ /^login: LOGIN ON (tty|pts\/)[0-9]+ BY ([^ ]+)/ )) {
       $UserLogin{$User}++;
@@ -122,11 +144,11 @@
       push @DeletedGroups, "   $ThisLine\n";
    } elsif ( $ThisLine =~ s/^(useradd|adduser)\[\d+\]: new group: name=(.+), gid=(\d+).*$/$1 ($2)/ ) {
       push @NewGroups, "   $ThisLine\n";
-   } elsif ( ($User,$Group) =~ /useradd\[\d+\]: add `([^ ]+)' to group `([^ ]+)'$/ ) {
+   } elsif ( (undef,$User,,undef,$Group) = ($ThisLine =~ /(usermod|useradd)\[\d+\]: add `([^ ]+)' to (shadow |)group `([^ ]+)'/ )) {
       $AddToGroup{$Group}{$User}++;
    } elsif ( $ThisLine =~ s/^groupadd\[\d+\]: new group: name=(.+), gid=(\d+).*$/$1 ($2)/ ) {
       push @NewGroups, "   $ThisLine\n";
-   } elsif ( $ThisLine =~ /^userdel\[\d+\]: delete `(.*)' from (shadow|group) `(.*)'\s*$/ ) {
+   } elsif ( $ThisLine =~ /^userdel\[\d+\]: delete `(.*)' from (shadow |)group `(.*)'\s*$/ ) {
       push @RemoveFromGroup, "    user $1 from group $3\n";
       # This is an inetd lookup... $1 is the service (i.e. ftp), $2 is the response
       # I don't think these are important to log at this time
@@ -141,8 +163,33 @@
       $Refused->{$service}->{$from}++;
    } elsif ( ($User) = ($ThisLine =~ /^chage\[\d+\]: changed password expiry for ([^ ]+)/)) {
       $PasswordExpiry{$User}++;
-   } elsif ( (undef) = ($ThisLine =~ /^pam_console\[\d+\]: console file lock already in place ([^ ]+)/)) {
+   } elsif ( (undef) = ($ThisLine =~ /^pam_console\[\d+\]: console file lock already in place ([^ ]+)/ )) {
       $ConsoleLock++;
+   } elsif ( ($Message) = ($ThisLine =~ /^pam_xauth\[\d+\]: call_xauth: (.+)/)) {
+      $XauthMessage{$Message}++;
+   } elsif ( ($Group,$NewName) = ($ThisLine =~ /^groupmod\[\d+\]: change group `(.*)' to `(.*)'/)) {
+      $GroupRenamed{"$Group -> $NewName"}++;
+   } elsif ( ($User,$Home,$NewHome) = ($ThisLine =~ /^usermod\[\d+\]: change user `(.*)' home from `(.*)' to `(.*)'/)) {
+      $HomeChange{$User}{"$Home -> $NewHome"}++;
+   } elsif ( ($User,$From,$To) = ($ThisLine =~ /^usermod\[\d+\]:change user `(.*)' UID from `(.*)' to `(.*)'/)) {
+      $UidChange{"$User: $From -> $To"}++;
+   } elsif ( ($User,$From,$To) = ($ThisLine =~ /^usermod\[\d+\]: change user `(.*)' GID from `(.*)' to `(.*)'/)) {
+      $GidChange{"$User: $From -> $To"}++;
+   # checkpassword-pam
+   } elsif ( ($PID) = ($ThisLine =~ /^checkpassword-pam\[(\d+)\]: Reading username and password/)) {
+   } elsif ( ($PID,$Username) = ($ThisLine =~ /^checkpassword-pam\[(\d+)\]: Username '([^']+)'/)) {
+      $ChkPasswdPam{$PID}{'Username'} = $Username;
+   } elsif ( ($PID) = ($ThisLine =~ /^checkpassword-pam\[(\d+)\]: Password read successfully/)) {
+   } elsif ( ($PID,$Service) = ($ThisLine =~ /^checkpassword-pam\[(\d+)\]: Initializing PAM library using service name '([^']+)'/)) {
+      $ChkPasswdPam{$PID}{'Service'} = $Service;
+   } elsif ( ($PID) = ($ThisLine =~ /^checkpassword-pam\[(\d+)\]: Pam library initialization succeeded/)) {
+   } elsif ( ($PID) = ($ThisLine =~ /^checkpassword-pam\[(\d+)\]: conversation\(\): msg\[0\], style PAM_PROMPT_ECHO_OFF, msg = "Password: "/)) {
+   } elsif ( ($PID) = ($ThisLine =~ /^checkpassword-pam\[(\d+)\]: Authentication passed/)) {
+      $ChkPasswdPam{$PID}{'Success'} = 'true';
+   } elsif ( ($PID) = ($ThisLine =~ /^checkpassword-pam\[(\d+)\]: Account management succeeded/)) {
+   } elsif ( ($PID) = ($ThisLine =~ /^checkpassword-pam\[(\d+)\]: Setting PAM credentials succeeded/)) {
+   } elsif ( ($PID) = ($ThisLine =~ /^checkpassword-pam\[(\d+)\]: Terminating PAM library/)) {
+   } elsif ( ($PID) = ($ThisLine =~ /^checkpassword-pam\[(\d+)\]: Exiting with status 0/)) {
    } else {
       # Unmatched entries...
       push @OtherList, "$ThisLine\n";
@@ -164,14 +211,21 @@
 }
 
 if (@DeletedGroups) {
-   print "\nDeleted Groups:\n@DeletedUsers\n";
+   print "\nDeleted Groups:\n@DeletedGroups\n";
+}
+
+if (keys %GroupRenamed) {
+   print "\nRenamed groups:\n";
+   foreach $Group (sort {$a cmp $b} keys %GroupRenamed) {
+      print "   $Group\n";
+   }
 }
 
 if (keys %AddToGroup) {
    print "\nAdded User to group:\n";
    foreach $Group (sort {$a cmp $b} keys %AddToGroup) {
-      print "   Group $Group:\n";
-      foreach $User (sort {$a cmp $b} keys %{$AddToGroup{$User}}) {
+      print "   $Group:\n";
+      foreach $User (sort {$a cmp $b} keys %{$AddToGroup{$Group}}) {
          print "      $User\n";
       }
    }
@@ -181,6 +235,31 @@
    print "\nRemoved From Group:\n@RemoveFromGroup\n";
 }
 
+if (keys %HomeChange) {
+   print "\nChanged users home directory:\n";
+   foreach $User (sort {$a cmp $b} keys %HomeChange) {
+      print "   $User:\n";
+      # No sorting here - show it by time...
+      foreach $Home (keys %{$HomeChange{$User}}) {
+         print "      $Home\n";
+      }
+   }
+}
+
+if (keys %UidChange) {
+   print "\nChanged users UID:\n";
+   foreach $Entry (sort {$a cmp $b} keys %UidChange) {
+      print "   $Entry\n";
+   }
+}
+
+if (keys %GidChange) {
+   print "\nChanged users GID:\n";
+   foreach $Entry (sort {$a cmp $b} keys %GidChange) {
+      print "   $Entry\n";
+   }
+}
+
 if (keys %{$Connections}) {
    print "\nConnections:\n";
    foreach $ThisOne (keys %{$Connections}) {
@@ -225,13 +304,23 @@
    }
 }
 
-if (keys %{$NoIP}) {
+if (keys %NoIP) {
    print "\nCouldn't get client IPs for connections to:\n";
-   foreach $ThisOne (sort {$a cmp $b} keys %{$NoIP}) {
+   foreach $ThisOne (sort {$a cmp $b} keys %NoIP) {
       print "   $ThisOne: $NoIP{$ThisOne} Time(s)\n";
    }
 }
 
+if (keys %NameVerifyFail) {
+   print "\nHostname verification failed:\n";
+   foreach $Service (sort {$a cmp $b} keys %NameVerifyFail) {
+      print "   Service $Service:\n";
+      foreach $Name (sort {$a cmp $b} keys %{$NameVerifyFail{$Service}}) {
+         print "      $Name$NameVerifyFail{$Service}{$Name} Time(s)\n";
+      }
+   }
+}
+
 if (keys %Error) {
    print "\nErrors:\n";
    foreach $Service (sort {$a cmp $b} keys %Error) {
@@ -264,11 +353,57 @@
    }
 }
 
+if (keys %XauthMessage) {
+   print "\nReported by call_xauth:\n";
+   foreach $Message (sort {$a cmp $b} keys %XauthMessage) {
+      print "   $Message : $XauthMessage{$Message} Time(s)\n";
+   }
+}
+
+if (keys %PopLogin) {
+   print "\nspop3d user connections:\n";
+   foreach $PopUser (sort {$a cmp $b} keys %PopLogin) {
+      print "   $PopUser\:\t$PopLogin{$PopUser} Time(s)\n";
+   }
+}
+
+if (keys %PopErrors) {
+   print "\nspop3d  connection failures:\n";
+   foreach $PopErr (sort {$a cmp $b} keys %PopErrors) {
+      print "   $PopErr\:\t$PopErrors{$PopErr} Time(s)\n";
+   }
+}
+
+if ($spop3d_opened > 0) {
+   print "\nspop3d connections(sum):\t".$spop3d_opened."\n";
+}
+
+if ($spop3d_errors > 0) {
+   print "spop3d connection errors:\t".$spop3d_errors."\n";
+}
+
 if ($#SudoList >= 0) {
    print "\nUnauthorized sudo commands attempted (" . ($#SudoList + 1) . "):\n";
    print @SudoList;
 }
 
+if (keys %ChkPasswdPam) {
+   print "\ncheckpassword-pam (SUID root PAM client):\n";
+   foreach $PID (sort {$a cmp $b} keys %ChkPasswdPam) {
+      $ServiceUsernamePair = $ChkPasswdPam{$PID}{'Username'}.' => '.$ChkPasswdPam{$PID}{'Service'};
+      if ($ChkPasswdPam{$PID}{'Success'} eq 'true') {
+         $Successes{$ServiceUsernamePair}++;
+      } else {
+         $Failures{$ServiceUsernamePair}++;
+      }
+   }
+   foreach $ServiceUsernamePair (sort {$a cmp $b} keys %Successes) {
+      $S = $Successes{$ServiceUsernamePair} ? $Successes{$ServiceUsernamePair} : 0;
+      $F = $Failures{$ServiceUsernamePair} ? $Failures{$ServiceUsernamePair} : 0;
+      print "   $ServiceUsernamePair : $S success(es), $F failure(s)\n";
+   }
+}
+
 if ($#OtherList >= 0) {
    print "\n**Unmatched Entries**\n";
    print @OtherList;
