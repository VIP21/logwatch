Index: scripts/services/secure
===================================================================
RCS file: /var/cvs/logwatch/scripts/services/secure,v
retrieving revision 1.44
diff -u -r1.44 secure
--- scripts/services/secure	3 Feb 2004 04:26:36 -0000	1.44
+++ scripts/services/secure	3 Apr 2004 13:46:42 -0000
@@ -47,6 +47,7 @@
       ( $ThisLine =~ /^sudo:/) or
       ( $ThisLine =~ /^halt:/) or
       ( $ThisLine =~ /^reboot:/) or
+      ( $ThisLine =~ /^pam_xauth\[\d+\]: call_xauth: child returned \d/) or
       ( $ThisLine =~ /^passwd\[\d+\]:/) or
       ( $ThisLine =~ /warning: can.t get client address: Connection refused/) or
       ( $ThisLine =~ /^xinetd\[\d+\]: USERID: ([^ ]+) (.+)$/ ) or
@@ -90,6 +91,10 @@
          $Name = LookupIP($IP);
          $Connections->{$Service}->{$Name}++;
       }
+   } elsif ( ($Service,undef,$Name) = ($ThisLine =~ /^([^ ]+)\[\d+\]: warning: ([^ ]+), line \d+: can't verify hostname: getaddrinfo\(([^ ]+), AF_INET\) failed$/) ) {
+      $NameVerifyFail{$Service}{$Name}++;
+   } elsif ( ($Service,undef,$Name,$IP) = ($ThisLine =~ /^([^ ]+)\[\d+\]: warning: ([^ ]+), line \d+: host name\/name mismatch: ([^ ]+) != ([^ ]+)$/) ) {
+      $NameVerifyFail{$Service}{"$Name != $IP"}++;
    } elsif ( ($Display, $User) = ($ThisLine =~ /^xscreensaver\[\d+\]: FAILED LOGIN \d ON DISPLAY \"([^ ]+)\", FOR \"([^ ]+)\"$/) ) {
       $FailedSaver{$User}{$Display}++;
    } elsif ( $ThisLine =~ s/^([^ ]+)\[\d+\]: warning: can\'t get client address: No route to host$/$1/ ) {
@@ -108,7 +113,7 @@
       $Error{$Service}{$Err}++;
    } elsif ( ($Service,$Err) = ($ThisLine =~ /^([^ ]+): (password mismatch for [^ ]+ in [^ ]+):.*$/ ) ) {
       $Error{$Service}{$Err}++;
-   } elsif ( $ThisLine =~ /^login: ROOT LOGIN/) {
+   } elsif ( $ThisLine =~ /^login: ROOT LOGIN ON tty[0-9]+/) {
       $RootLoginTTY++
    } elsif ( (undef,$User) = ($ThisLine =~ /^login: LOGIN ON (tty|pts\/)[0-9]+ BY ([^ ]+)/ )) {
       $UserLogin{$User}++;
@@ -122,11 +127,11 @@
       push @DeletedGroups, "   $ThisLine\n";
    } elsif ( $ThisLine =~ s/^(useradd|adduser)\[\d+\]: new group: name=(.+), gid=(\d+).*$/$1 ($2)/ ) {
       push @NewGroups, "   $ThisLine\n";
-   } elsif ( ($User,$Group) =~ /useradd\[\d+\]: add `([^ ]+)' to group `([^ ]+)'$/ ) {
+   } elsif ( (undef,$User,,undef,$Group) = ($ThisLine =~ /(usermod|useradd)\[\d+\]: add `([^ ]+)' to (shadow |)group `([^ ]+)'/ )) {
       $AddToGroup{$Group}{$User}++;
    } elsif ( $ThisLine =~ s/^groupadd\[\d+\]: new group: name=(.+), gid=(\d+).*$/$1 ($2)/ ) {
       push @NewGroups, "   $ThisLine\n";
-   } elsif ( $ThisLine =~ /^userdel\[\d+\]: delete `(.*)' from (shadow|group) `(.*)'\s*$/ ) {
+   } elsif ( $ThisLine =~ /^userdel\[\d+\]: delete `(.*)' from (shadow |)group `(.*)'\s*$/ ) {
       push @RemoveFromGroup, "    user $1 from group $3\n";
       # This is an inetd lookup... $1 is the service (i.e. ftp), $2 is the response
       # I don't think these are important to log at this time
@@ -141,8 +146,16 @@
       $Refused->{$service}->{$from}++;
    } elsif ( ($User) = ($ThisLine =~ /^chage\[\d+\]: changed password expiry for ([^ ]+)/)) {
       $PasswordExpiry{$User}++;
-   } elsif ( (undef) = ($ThisLine =~ /^pam_console\[\d+\]: console file lock already in place ([^ ]+)/)) {
+   } elsif ( (undef) = ($ThisLine =~ /^pam_console\[\d+\]: console file lock already in place ([^ ]+)/ )) {
       $ConsoleLock++;
+   } elsif ( ($Message) = ($ThisLine =~ /^pam_xauth\[\d+\]: call_xauth: (.+)/)) {
+      $XauthMessage{$Message}++;
+   } elsif ( ($Group,$NewName) = ($ThisLine =~ /^groupmod\[\d+\]: change group `(.*)' to `(.*)'/)) {
+      $GroupRenamed{"$Group -> $NewName"}++;
+   } elsif ( ($User,$Home,$NewHome) = ($ThisLine =~ /^usermod\[\d+\]: change user `(.*)' home from `(.*)' to `(.*)'/)) {
+      $HomeChange{$User}{"$Home -> $NewHome"}++;
+   } elsif ( ($User,$From,$To) = ($ThisLine =~ /^usermod\[\d+\]:change user `(.*)' UID from `(.*)' to `(.*)'/)) {
+      $UidChange{"$User: $From -> $To"}++;
    } else {
       # Unmatched entries...
       push @OtherList, "$ThisLine\n";
@@ -167,11 +180,18 @@
    print "\nDeleted Groups:\n@DeletedUsers\n";
 }
 
+if (keys %GroupRenamed) {
+   print "\nRenamed groups:\n";
+   foreach $Group (sort {$a cmp $b} keys %GroupRenamed) {
+      print "   $Group\n";
+   }
+}
+
 if (keys %AddToGroup) {
    print "\nAdded User to group:\n";
    foreach $Group (sort {$a cmp $b} keys %AddToGroup) {
-      print "   Group $Group:\n";
-      foreach $User (sort {$a cmp $b} keys %{$AddToGroup{$User}}) {
+      print "   $Group:\n";
+      foreach $User (sort {$a cmp $b} keys %{$AddToGroup{$Group}}) {
          print "      $User\n";
       }
    }
@@ -181,6 +201,24 @@
    print "\nRemoved From Group:\n@RemoveFromGroup\n";
 }
 
+if (keys %HomeChange) {
+   print "\nChanged users home directory:\n";
+   foreach $User (sort {$a cmp $b} keys %HomeChange) {
+      print "   $User:\n";
+      # No sorting here - show it by time...
+      foreach $Home (keys %{$HomeChange{$User}}) {
+         print "      $Home\n";
+      }
+   }
+}
+
+if (keys %UidChange) {
+   print "\nChanged users UID:\n";
+   foreach $Entry (sort {$a cmp $b} keys %UidChange) {
+      print "   $Entry\n";
+   }
+}
+
 if (keys %{$Connections}) {
    print "\nConnections:\n";
    foreach $ThisOne (keys %{$Connections}) {
@@ -225,13 +263,23 @@
    }
 }
 
-if (keys %{$NoIP}) {
+if (keys %NoIP) {
    print "\nCouldn't get client IPs for connections to:\n";
-   foreach $ThisOne (sort {$a cmp $b} keys %{$NoIP}) {
+   foreach $ThisOne (sort {$a cmp $b} keys %NoIP) {
       print "   $ThisOne: $NoIP{$ThisOne} Time(s)\n";
    }
 }
 
+if (keys %NameVerifyFail) {
+   print "\nHostname verification failed:\n";
+   foreach $Service (sort {$a cmp $b} keys %NameVerifyFail) {
+      print "   Service $Service:\n";
+      foreach $Name (sort {$a cmp $b} keys %{$NameVerifyFail{$Service}}) {
+         print "      $Name$NameVerifyFail{$Service}{$Name} Time(s)\n";
+      }
+   }
+}
+
 if (keys %Error) {
    print "\nErrors:\n";
    foreach $Service (sort {$a cmp $b} keys %Error) {
@@ -261,6 +309,13 @@
    print "\nChanged password expiry for users:\n";
    foreach $User (sort {$a cmp $b} keys %PasswordExpiry) {
       print "   $User : $PasswordExpiry{$User} Time(s)\n";
+   }
+}
+
+if (keys %XauthMessage) {
+   print "\nReported by call_xauth:\n";
+   foreach $Message (sort {$a cmp $b} keys %XauthMessage) {
+      print "   $Message : $XauthMessage{$Message} Time(s)\n";
    }
 }
 
