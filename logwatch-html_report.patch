--- logwatch-5.2.2	Fri Jul 30 19:19:16 2004
+++ logwatch.pl	Thu Aug  5 20:51:40 2004
@@ -46,6 +46,14 @@
 $Config{'tmpdir'} = "/tmp";
 $Config{'splithosts'} = 0;
 $Config{'multiemail'} = 0;
+$Config{'pathtocat'} = "/bin/cat";
+$Config{'pathtozcat'} = "/bin/zcat";
+$Config{'output'} = "unformatted";
+$Config{'sendmail'} = "sendmail";
+
+
+
+
 # Logwatch now does some basic searching for logs
 # So if the log file is not in the log path it will check /var/adm
 # and then /var/log -mgt
@@ -59,6 +67,7 @@
    print "\nUsage: $0 [--detail <level>] [--logfile <name>]\n" . 
       "   [--print] [--mailto <addr>] [--archives] [--range <range>] [--debug <level>]\n" .
       "   [--save <filename>] [--help] [--version] [--service <name>]\n" .
+      "   [--output <output_type>]\n" .
       "   [--splithosts] [--multiemail]\n\n";
    print "--detail <level>: Report Detail Level - High, Med, Low or any #.\n";
    print "--logfile <name>: *Name of a logfile definition to report on.\n";
@@ -72,6 +81,7 @@
    print "--splithosts: Create a report for each host in syslog.\n";
    print "--multiemail: Send each host report in a separate email.  Ignored if \n";
    print "              not using --splithosts.\n";
+   print "--output <output type>: Report Format - mail, html-embed, html or unformatted#.\n";
    print "--version: Displays current version.\n";
    print "--help: This message.\n";
    print "* = Switch can be specified multiple times...\n\n";
@@ -252,6 +262,7 @@
              "hostname=s"   => \$Config{'hostname'},
              "splithosts"   => \$Config{'splithosts'},
              "multiemail"   => \$Config{'multiemail'},
+	     "o|output=s"   => \$Config{'output'},
            ) or Usage();
 
 $Help and Usage();
@@ -263,6 +274,37 @@
 
 CleanVars();
 
+
+my $outtype_mail=0;
+my $outtype_html=0;
+my $outtype_htmlembed=0;
+my $outtype_unformatted=0;
+my $index_par=0;
+my @format = (250);
+
+
+my (%out_body, $p);
+
+if ( $Config{'output'} eq 'mail' ) {
+	    $outtype_mail = 1;
+	} elsif ( $Config{'output'} eq 'html' ) {
+	    $outtype_html = 1;
+	} elsif ( $Config{'output'} eq 'html-embed' ) {
+	    $outtype_htmlembed = 1;
+	} elsif ( $Config{'output'} eq 'unformatted' ) {
+	    $outtype_unformatted = 1;
+	} else {
+	    print STDERR "$0: unknown output-format: $Config{'output'}\n\n";
+	}
+
+
+my @reports = ();
+
+my $out_head ='';
+my $out_mime ='';
+my $out_reference ='';
+
+
 if ($OldMailTo ne $Config{'mailto'}) {
    $Config{'print'} = 0;
 } elsif ($OldPrint ne $Config{'print'}) {
@@ -529,14 +571,18 @@
 
 $ENV{'LOGWATCH_DATE_RANGE'} = $Config{'range'};
 $ENV{'LOGWATCH_DETAIL_LEVEL'} = $Config{'detail'};
+$ENV{'LOGWATCH_OUTPUT_TYPE'} = $Config{'output'};
 $ENV{'LOGWATCH_DEBUG'} = $Config{'debug'};
 $ENV{'LOGWATCH_TEMP_DIR'} = $TempDir;
+$ENV{'OSname'} = $OSname;
+$ENV{'HOSTNAME'} = $Config{'hostname'};
+
 if ($Config{'hostlimit'}) {
    $ENV{'LOGWATCH_ONLY_HOSTNAME'} = $Config{'hostname'};
    $ENV{'LOGWATCH_ONLY_HOSTNAME'} =~ s/\..*//;
 }
 if ($Config{'debug'}>4) {
-   foreach ('LOGWATCH_DATE_RANGE', 'LOGWATCH_DETAIL_LEVEL', 
+   foreach ('LOGWATCH_DATE_RANGE', 'LOGWATCH_DETAIL_LEVEL', 'LOGWATCH_OUTPUT_TYPE',
             'LOGWATCH_TEMP_DIR', 'LOGWATCH_DEBUG', 'LOGWATCH_ONLY_HOSTNAME') {
       if ($ENV{$_}) {
          print "export $_='$ENV{$_}'\n";
@@ -571,26 +617,60 @@
    if ($Config{'archives'} == 1) {
       push @FileList, $TempDir . $LogFile . "-archive";
       my $Archive;
-      foreach $Archive (@{$LogFileData{$LogFile}{'archives'}}) {
+#      foreach $Archive (@{$LogFileData{$LogFile}{'archives'}}) {
+       foreach my $ArchiveWild (@{$LogFileData{$LogFile}{'archives'}}) {
+	  unless ($ArchiveWild =~ m=^/=) {
+	     $ArchiveWild = ($Config{'logdir'} . $ArchiveWild);
+	  } #End unless
+	foreach $Archive (glob $ArchiveWild) {
          my $DestFile =  $TempDir . $LogFile . "-archive";
          unless ($Archive =~ m=^/=) {
             $Archive = ($Config{'logdir'} . $Archive);
-         }
-         if ($Archive =~ m/gz$/) {
-            `/bin/zcat $Archive 2>/dev/null >> $DestFile`;
-         } else {
-            `/bin/cat $Archive 2>/dev/null >> $DestFile`;
-         }
-      }
-   }
+#         }
+#         if ($Archive =~ m/gz$/) {
+#            `/bin/zcat $Archive 2>/dev/null >> $DestFile`;
+#         } else {
+#            `/bin/cat $Archive 2>/dev/null >> $DestFile`;
+#         }
+#      }
+#   }
+         } #End unless
+         if (($Archive =~ m/gz$/) && (-e "$Archive")) {
+      #These system calls are not secure but we are getting closer
+      #What needs to go is all the pipes and instead we need a command loop
+      #For each filter to apply -mgt
+            my $arguments = "$Archive 2>/dev/null >> $DestFile";
+            system("$Config{'pathtozcat'} $arguments") == 0
+               or die "system $Config{'pathtozcat'} failed: $?" 
+         } elsif (-e "$Archive") {
+            my $arguments = "$Archive 2>/dev/null >> $DestFile";
+            system("$Config{'pathtocat'} $arguments") == 0
+               or die "system $Config{'pathtocat'} failed: $?" 
+         } #End if/elsif existance
+       } #End Archive
+      } #End ArchiveWild
+   } #End if Archives
    my $FileText = "";
-   foreach $ThisFile (@FileList) {
-      if ($ThisFile =~ m=^/=) {
+#   foreach $ThisFile (@FileList) {
+#      if ($ThisFile =~ m=^/=) {
+   foreach my $ThisFileWild (@FileList) {
+    unless ( ($ThisFileWild =~ m=^/=) || ($ThisFileWild =~ m=^$TempDir=) )  {
+      $ThisFileWild = ($Config{'logdir'} . $ThisFileWild);
+    } #End unless
+
+    foreach my $ThisFile (glob $ThisFileWild) {
+      #Existance check for files -mgt
+      next unless ( (-e $ThisFile) || (-e $Config{'logdir'} . $ThisFile));
+      if ( ($ThisFile =~ m=^/=) || ($ThisFile =~ m=^$TempDir=) ) {
          $FileText .= ($ThisFile . " ");
       } else {
          $FileText .= ( $Config{'logdir'} . $ThisFile . " ");
-      }
-   }
+#      }
+#   }
+     } #End if
+    } #End glob
+   } #End foreach Wild
+
    my $FilterText = " 2>/dev/null ";
    foreach (sort keys %{$LogFileData{$LogFile}}) {
       my $cmd = $_;
@@ -611,6 +691,9 @@
       }
       closedir (LOGDIR);
    }
+
+   #Instead of trying to cat no-existant logs we test for it above -mgt
+
    if ($FileText) {
       my $Command = $FileText . $FilterText . ">" . $TempDir . $LogFile;
       if ($Config{'debug'}>4) {
@@ -619,7 +702,13 @@
       if ($LogFile !~ /^[-_\w\d]+$/) {
          print STDERR "Unexpected filename: [[$LogFile]]. Not used\n"
       } else {
-         `/bin/cat $Command`;
+#         `/bin/cat $Command`;
+      #These system calls are not secure but we are getting closer
+      #What needs to go is all the pipes and instead we need a command loop
+      #For each filter to apply -mgt
+         system("$Config{'pathtocat'} $Command") == 0
+            or die "system $Config{'pathtocat'} $Command failed: $?" 
+
       }
    }
 }
@@ -636,7 +725,10 @@
    foreach $newlogfile (@logarray) {
      my $eeefile = ("$TempDir" . "$newlogfile");
      if ((!(-d $eeefile)) && (!($eeefile =~ m/-archive/))) {
-        `/bin/cat $eeefile $ecpcmd`;
+#        `/bin/cat $eeefile $ecpcmd`;
+         system("$Config{'pathtocat'} $eeefile, $ecpcmd") == 0
+            or die "system $Config{'pathtocat'} $eeefile $ecpcmd failed: $?" 
+
      }
    }
    #read in the final host list
@@ -665,28 +757,58 @@
          open(OUTFILE,"|$Config{'mailer'} $Config{'mailto'}") or die "Can't execute /bin/mail\n";
          print OUTFILE "From: LogWatcher\n";
          print OUTFILE "To: $Config{'mailto'}\n";
-         print OUTFILE "Subject: LogWatch for $Config{'hostname'}\n\n";
+	 if ( $outtype_htmlembed ) {
+	     print OUTFILE "MIME-Version: 1.0\n"; 
+	 }
+	 print OUTFILE "Subject: LogWatch for $Config{'hostname'}\n\n";
          if (($Config{'splithosts'} eq 1) && ($Config{'multiemail'} eq 0)) {
             print OUTFILE "Reporting on hosts: @hosts\n";
          }
          $emailopen = 'y';
       }
    } else {
-      if (($Config{'multiemail'} eq 1) || ($emailopen eq "")) {
-         open(OUTFILE,"|$Config{'mailer'} -s \"LogWatch for $Config{'hostname'}\" " . $Config{'mailto'}) or die "Can't execute /bin/mail\n";
-         if (($Config{'splithosts'} eq 1) && ($Config{'multiemail'} eq 0)) {
-            print OUTFILE "Reporting on hosts: @hosts\n";
-         }
-         $emailopen = 'y';
-      }
+       if (($Config{'multiemail'} eq 1) || ($emailopen eq "")) {
+	   if ( $outtype_html) {
+	       open(OUTFILE,"|uuencode $Config{'hostname'}.html |$Config{'mailer'} -s \"LogWatch for $Config{'hostname'}\" " . $Config{'mailto'}) or die "Can't execute /bin/mail\n";
+	   } elsif ( $outtype_htmlembed ) {
+	       open(OUTFILE,"|$Config{'sendmail'} -s \"LogWatch for $Config{'hostname'}\" " . $Config{'mailto'}) or die "Can't execute sendmail\n";
+	       $out_mime.= "From: LogWatcher\n";
+	       $out_mime.= "To: ".$Config{'mailto'}."\n";
+	       $out_mime.= "MIME-Version: 1.0\n"; 
+	       $out_mime.= "Subject: LogWatch for ".$Config{'hostname'}."\n";
+
+	   } else {
+	       open(OUTFILE,"|$Config{'mailer'} -s \"LogWatch for $Config{'hostname'}\" " . $Config{'mailto'}) or die "Can't execute /bin/mail\n";
+	   }
+	   if (($Config{'splithosts'} eq 1) && ($Config{'multiemail'} eq 0)) {
+	       print OUTFILE "Reporting on hosts: @hosts\n";
+	   }
+	   $emailopen = 'y';
+       }
    }
    $printing = 'y';
-   print OUTFILE "\n ################### LogWatch $Version ($VDate) #################### \n";
-   print OUTFILE "       Processing Initiated: " . localtime(time) . "\n";
-   print OUTFILE "       Date Range Processed: $Config{'range'}\n";
-   print OUTFILE "     Detail Level of Output: $Config{'detail'}\n";
-   print OUTFILE "          Logfiles for Host: $Config{'hostname'}\n";
-   print OUTFILE " ################################################################ \n";
+
+   $index_par++;
+   outstart($index_par,"LOGWATCH Summary");
+   if ( $outtype_html or $outtype_htmlembed ) {
+       outheader( $index_par, "\n <h2><font color=\"blue\"> LogWatch $Version ($VDate)</font></h3>\n");
+   }       else {
+       outline( $index_par, "\n ################### LogWatch $Version ($VDate) #################### \n");
+   }
+   outline( $index_par, "       Processing Initiated: " . localtime(time) . "\n");
+   outline( $index_par, "       Date Range Processed: $Config{'range'}\n");
+   outline( $index_par, "     Detail Level of Output: $Config{'detail'}\n");
+   outline( $index_par, "             Type of Output: $Config{'output'}\n");
+   outline( $index_par, "          Logfiles for Host: $Config{'hostname'}\n");
+
+   if ( $outtype_html or $outtype_htmlembed ) {
+   outline( $index_par, "\n");
+   } else {
+   outline( $index_par, " ################################################################## \n");
+   }
+   outstop( $index_par );
+
+
 }
 
 sub parselogs {
@@ -729,9 +851,13 @@
          $Command = " $FilterText 2>&1 "; 
       } elsif ($FileText) {
          if ($HostStrip ne " ") {
-            $Command = " ( /bin/cat $FileText | $HostStrip | $FilterText) 2>&1 "; 
+#            $Command = " ( /bin/cat $FileText | $HostStrip | $FilterText) 2>&1 "; 
+             $Command = " ( $Config{'pathtocat'} $FileText | $HostStrip | $FilterText) 2>&1 "; 
+
          } else {
-            $Command = " ( /bin/cat $FileText | $FilterText) 2>&1 "; 
+#            $Command = " ( /bin/cat $FileText | $FilterText) 2>&1 "; 
+             $Command = " ( $Config{'pathtocat'} $FileText | $FilterText) 2>&1 "; 
+
          }
       }
    
@@ -746,19 +872,147 @@
             next if ((not $printing) and $ThisLine =~ /^\s*$/);
             initprint();
             if (($has_output == 0) and ($ServiceData{$Service}{'title'})) {
-               print OUTFILE "\n --------------------- $ServiceData{$Service}{'title'} Begin ------------------------ \n\n";
+
+#               print OUTFILE "\n --------------------- $ServiceData{$Service}{'title'} Begin ------------------------ \n\n";
+	       
+	       $index_par++;
+	       outstart($index_par, $ServiceData{$Service}{'title'} );
+   if ( $outtype_html or $outtype_htmlembed ) {
+               outheader( $index_par, "\n <h3><font color=\"blue\">$ServiceData{$Service}{'title'} Begin </font></h3>\n");
+	   } else {
+               outline( $index_par, "\n --------------------- $ServiceData{$Service}{'title'} Begin ------------------------ \n\n");
+	   }
                $has_output = 1;
             }
-            print OUTFILE $ThisLine;
+#            print OUTFILE $ThisLine;
+	    outline( $index_par, $ThisLine);
          }
          close (TESTFILE);
          if ($has_output and $ServiceData{$Service}{'title'}) {
-            print OUTFILE "\n ---------------------- $ServiceData{$Service}{'title'} End ------------------------- \n\n";
+#            print OUTFILE "\n ---------------------- $ServiceData{$Service}{'title'} End ------------------------- \n\n";
+   if ( $outtype_html or $outtype_htmlembed ) {
+            outheader( $index_par,  "\n <h3><font color=\"blue\">$ServiceData{$Service}{'title'} End </font></h3>\n");
+	} else {
+            outline( $index_par,  "\n ---------------------- $ServiceData{$Service}{'title'} End ------------------------- \n\n");
+	}
+	    outstop($index_par);
          }
       }
    }
 
-   print OUTFILE $report_finish if ($printing);
+
+
+if ( $outtype_htmlembed ) {
+    $out_head .= $out_mime;
+$out_head .= 'MIME-Version: 1.0
+Content-Type: multipart/alternative; boundary="=_alternative 003B1B25C1256EE7_="
+Message en plusieurs parties au format MIME
+--=_alternative 003B1B25C1256EE7_=
+Content-Transfer-Encoding: quoted-printable
+Content-Type: text/plain; charset="iso-8859-1"
+--=_alternative 003B1B25C1256EE7_=
+Content-Transfer-Encoding: quoted-printable
+Content-Type: text/html; charset="iso-8859-1"
+'
+}
+
+if ( $outtype_html or $outtype_htmlembed ) {
+$out_head .=
+"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\"\"http://www.w3.org/TR/REC-html40/loose.dtd\">
+<html>
+ <head>
+";
+$out_head .="<title>LogWatch ". $Version . " (" .$VDate.")</title>";
+$out_head .="<meta name=\"generator\" content=\"LogWatch " . $Version . "(".$VDate.")" . "\">";
+$out_head .="
+<style type=\"text/css\">
+      h1 {color: gray; border-bottom: 3px double silver}
+      h2,h3 {color: gray; border-bottom: 1px solid silver}
+      .sample {border-left: 3px double gray; padding-left: 1%}
+      .explan {color: green; border-top: 1px solid green; 
+      border-bottom: 1px solid green;
+      padding: 1%; margin-top: 1%; margin-bottom: 1%;}
+      .copyright {color: black; border-top: 1px solid grey; 
+      border-bottom: 1px solid grey;
+      padding: 1%; margin-top: 1%; margin-bottom: 1%;}
+    </style>
+ </head>
+ <body style=\"width:70%; margin-left: 15%\" bgcolor=\"#FFFFFF\">
+ <hr>";
+}
+
+
+
+
+
+
+
+   if ( $outtype_html or $outtype_htmlembed ) {
+       $index_par++;
+       outstart( $index_par,  "LogWatch End" );
+       outheader( $index_par,  "\n <h3><font color=\"blue\">LogWatch ended at ".  localtime(time) ."</font></h3>\n") if ($printing);
+       outstop($index_par);
+   }   else {
+       outline( $index_par, $report_finish) if ($printing);
+   }
+
+   if ( $outtype_html or $outtype_htmlembed ) {
+
+   print OUTFILE $out_head;    
+   print OUTFILE $out_body{'E'} if defined $out_body{'E'};
+
+
+   print OUTFILE "<hr><ul>\n";
+   foreach ( 'E', 0 .. $index_par ) {
+       outref($_,$reports[$_]) if defined( $reports[$_] );
+   }
+   print OUTFILE $out_reference;
+   print OUTFILE "</ul></hr>\n";
+
+
+   }
+
+######## In Any Case print the report ########
+
+
+
+   foreach ( 'E', 0 .. $index_par ) {
+       if ( $outtype_html or $outtype_htmlembed ) {
+	   print OUTFILE $out_body{$_} if defined( $out_body{$_} );
+       }
+       else {
+	   print OUTFILE $out_body{$_} if defined( $out_body{$_} );
+       }
+
+   }
+
+
+
+   if ( $outtype_html or $outtype_htmlembed ) {
+
+
+  print OUTFILE '<div class=\"copyright\">
+   <hr>
+   <p>LogWatch HTML report is also based on the work done by the people of Calamaris, see address for details</p>
+   <address><a href="http://Calamaris.Cord.de/">Calamaris</a>
+   $Revision$, Copyright &copy; 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004
+   <a href="http://Cord.de/">Cord Beermann</a>.
+  </address>
+  <p>Calamaris comes with ABSOLUTELY NO WARRANTY. It is free software, and you
+   are welcome to redistribute it under certain conditions.  See source for
+   details.
+  </p></div>
+';
+    print OUTFILE ' </body></html>', "\n";
+
+  if ($outtype_htmlembed) {
+    print OUTFILE '--=_alternative 003B1B25C1256EE7_=--', "\n";
+  }
+}
+
+
+
+
    if ($Config{'multiemail'} eq 1) {
       close(OUTFILE) unless ($Config{'print'} eq 1);
    }
@@ -786,5 +1040,167 @@
 
 exit(0);
 
+sub outref {
+    my $name = shift (@_);
+    $out_reference .= "   <li><a href=\"#$name\">$reports[$name]</a>\n";
+}
+
+sub outstart {
+    my $index = shift (@_);
+    my $name = shift (@_);
+    $reports[$index]=$name;
+    if ( $outtype_html or $outtype_htmlembed ) {
+	if ( $index eq 'E' ) {
+	    $out_body{$index} .= "  <hr><table border=\"0\">\n";
+	} else {
+	    $out_body{$index} .= "  <hr>
+  <h2><a name=\"$index\">$reports[$index]</a></h2>
+  <div class=\"sample\">
+  <table border=\"1\">\n";
+	}
+    } else {
+	$out_body{$index} .= "\n# $reports[$index]\n" unless ( $index eq 'E' );
+    }
+}
+
+sub outheader {
+    my $index = shift (@_);
+    my $print;
+    my $no = 0;
+    $out_body{$index} .= "   <tr>\n" if ( $outtype_html or $outtype_htmlembed );
+    foreach (@_) {
+	$p = $_;
+	if ($outtype_unformatted) {
+	    $out_body{$index} .= "$p ";
+	} elsif ( $outtype_html or $outtype_htmlembed ) {
+      $p =~ s# +# #go;
+      $p =~ s#(^ | $)##go;
+      $p = '&nbsp;' if ( $p eq '' );
+      $out_body{$index} .= "    <th>$p</th>\n";
+  } elsif ( $format[$no] eq '%' ) {
+      $out_body{$index} .=
+	  sprintf( ' ' x ( 6 - length($p) ) ) . substr( $p, 0, 6 ) . ' ';
+  } elsif ( $format[$no] eq 'kbs' ) {
+      $out_body{$index} .=
+	  sprintf( substr( $p, 0, 7 ) . ' ' x ( 7 - length($p) ) . ' ' );
+  } else {
+      $out_body{$index} .=
+	  sprintf(
+		  substr( $p, 0, $format[$no] )
+		  . ' ' x( $format[$no] - length($p) ) . ' ' );
+  }
+	$no++;
+    }
+    $out_body{$index} .= '   </tr>' if ( $outtype_html or $outtype_htmlembed );
+    $out_body{$index} .= "\n";
+}
+
+sub outline {
+    my $index = shift (@_);
+    my $print;
+    my $no = 0;
+    $out_body{$index} .= "   <tr>\n" if ( $outtype_html or $outtype_htmlembed );
+    foreach (@_) {
+	$print = $_;
+	if ($outtype_unformatted or $outtype_mail) {
+	    $out_body{$index} .= "$print ";
+	} elsif ( $outtype_html or $outtype_htmlembed ) {
+      $print =~ s# +# #go;
+      $print =~ s# $##go;
+      $print =~ s#<#\&lt\;#go;
+      $print =~ s#>#\&gt\;#go;
+      if ( $no == 0 ) {
+	  unless ( $print =~ s#^ ##go ) {
+		   $out_body{$index} .= "    <th align=\"left\">$print</th>\n";
+	       } else {
+		   $out_body{$index} .= "    <td bgcolor=\"#dddddd\">&nbsp;&nbsp;$print</td>\n";
+	       }
+      } elsif ( $format[$no] eq '%' or $format[$no] eq 'kbs' ) {
+	  if ( $print eq '' or $print eq '-' ) {
+	      $out_body{$index} .= "    <td>&nbsp;</td>\n";
+	  } else {
+	      $out_body{$index} .=
+		  sprintf( "    <td align=\"right\">%.2f</td>\n", $print );
+	  }
+      } elsif ( $no == 1 or $print =~ m#^[\d\.e\-\+]+$#o ) {
+		$out_body{$index} .=
+		sprintf( "    <td align=\"right\">%d</td>\n", $print );
+	    } else {
+		if ($print) {
+		    $out_body{$index} .= "    <td align=\"right\">$print</td>\n";
+		} else {
+		    $out_body{$index} .= "    <td align=\"right\">&nbsp;</td>\n";
+		}
+	    }
+  } else {
+      if ( $no == 0 ) {
+	  if ( length($print) > $format[$no] ) {
+	      $out_body{$index} .=
+		  sprintf( $print . "\n" . ' ' x $format[$no] . ' ' );
+	  } else {
+	      $out_body{$index} .=
+		  sprintf( $print . ' ' x ( $format[$no] - length($print) ) . ' ' );
+	  }
+      } elsif ( $format[$no] eq '%' ) {
+	  if ( $print eq ' ' ) {
+	      $out_body{$index} .= ' ' x 7;
+	  } else {
+	      $out_body{$index} .= sprintf( "%6.2f ", $print );
+	  }
+      } elsif ( $format[$no] eq 'kbs' ) {
+	  if ( $print eq '-' ) {
+	      $out_body{$index} .= '    -   ';
+	  } else {
+	      if ( $print >= 10000 ) {
+		  $out_body{$index} .= sprintf( "%7.0f ", $print );
+	      } else {
+		  $out_body{$index} .= sprintf( "%7.2f ", $print );
+	      }
+	  }
+      } else {
+	  $print = sprintf( "%d", $print + .5 ) if $print =~ m#^[\d\.e\-\+]+$#o;
+	  $out_body{$index} .=
+	        sprintf( ' ' x ( $format[$no] - length($print) )
+			 . substr( $print, 0, $format[$no] ) . ' ' );
+      }
+  }
+	$no++;
+    }
+    $out_body{$index} .= '   </tr>' if ( $outtype_html or $outtype_htmlembed );
+    $out_body{$index} .= "\n" if ( $outtype_html or $outtype_htmlembed );
+}
+
+sub outseperator {
+    my $index = shift (@_);
+    my $print;
+    $out_body{$index} .= "   <tr>\n" if ( $outtype_html or $outtype_htmlembed );
+    foreach $print (@format) {
+	if ($outtype_unformatted) {
+	    $out_body{$index} .= "--- ";
+	} elsif ( $outtype_html or $outtype_htmlembed ) {
+	    $out_body{$index} .= "    <td></td>\n";
+	} elsif ( $print eq '%' ) {
+	    $out_body{$index} .= sprintf( '-' x 6 . ' ' );
+	} elsif ( $print eq 'kbs' ) {
+	    $out_body{$index} .= sprintf( '-' x 7 . ' ' );
+	} else {
+	    $out_body{$index} .= sprintf( '-' x $print . ' ' );
+	}
+    }
+    $out_body{$index} .= '   </tr>' if ( $outtype_html or $outtype_htmlembed );
+    $out_body{$index} .= "\n";
+}
+
+sub outstop {
+    my $index = shift (@_);
+    if ( $outtype_html or $outtype_htmlembed ) {
+	$out_body{$index} .= "  </table></div>\n";
+	$out_body{$index} .= "  <div class=\"explan\"><p><a href=\"#top\">Back to Top</a></p></div>\n";
+    }
+}
+
+
+
+
 # vi: shiftwidth=3 tabstop=3 et
 
