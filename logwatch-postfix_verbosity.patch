diff -dur logwatch-5.2.2.orig/scripts/services/postfix logwatch-5.2.2/scripts/services/postfix
--- logwatch-5.2.2.orig/scripts/services/postfix	2004-09-20 15:04:43.000000000 +0200
+++ logwatch-5.2.2/scripts/services/postfix	2004-09-20 15:06:48.387494007 +0200
@@ -234,18 +234,14 @@
       $PixWorkaround{$Host}++;
    } elsif ( ($Message) = ($ThisLine =~ /warning: valid_hostname: (.*)$/)) {
       $ValidHostname{$Message}++;
-   } elsif ( ($Host,$MyName) = ($ThisLine =~ /warning: host ([^ ]*\[[^ ]*\]) greeted me with my own hostname ([^ ]*)$/)) {
-      $Temp = "$Host : greeted me with my own hostname $MyName";
-      $HeloError{$Temp}++;
-   } elsif ( ($Host,$MyName) = ($ThisLine =~ /warning: host ([^ ]*\[[^ ]*\]) replied to HELO\/EHLO with my own hostname ([^ ]*)$/)) {
-      $Temp = "$Host : replied to HELO\/EHLO with my own hostname $MyName";
-      $HeloError{$Temp}++;
-   } elsif ( ($Host,$Reason) = ($ThisLine =~ /reject: RCPT from ([^ ]*\[[^ ]*\]): \d+ <.*>: Helo command rejected: (.*);/)) {
-      $Temp = "$Host : Helo command rejected \($Reason\)";
-      $HeloError{$Temp}++;
-   } elsif ( ($Size,$Host) = ($ThisLine =~ /bad size limit "\(([^ ]*)\)" in EHLO reply from ([^ ]*\[[^ ]*\])$/)) {
-      $Temp = "$Host : bad size limit \($Size\) in EHLO reply";
-      $HeloError{$Temp}++;
+   } elsif ( ($Host,$Error) = ($ThisLine =~ /warning: host ([^ ]*\[[^ ]*\]) (greeted me with my own hostname [^ ]*)$/)) {
+      $HeloError{$Error}{$Host}++;
+   } elsif ( ($Host,$Error) = ($ThisLine =~ /warning: host ([^ ]*\[[^ ]*\]) (replied to HELO\/EHLO with my own hostname [^ ]*)$/)) {
+      $HeloError{$Error}{$Host}++;
+   } elsif ( ($Host,$Error) = ($ThisLine =~ /reject: RCPT from ([^ ]*\[[^ ]*\]): \d+ <.*>: (Helo command rejected: .*);/)) {
+      $HeloError{$Error}{$Host}++;
+   } elsif ( ($Error,$Host) = ($ThisLine =~ /(bad size limit "\([^ ]*\)" in EHLO reply) from ([^ ]*\[[^ ]*\])$/)) {
+      $HeloError{$Error}{$Host}++;
    } elsif ( ($Host,$Command) = ($ThisLine =~ /warning: Illegal address syntax from ([^ ]*\[[^ ]*\]) in ([^ ]*) command:/)) {
       $IllegalAddressSyntax{$Command}{$Host}++;
    } elsif ( ($Error) = ($ThisLine =~ /warning: mailer loop: (.*)$/)) {
@@ -361,34 +357,72 @@
 }
 
 if (keys %QueueWriteError) {
-   print "\nError writing queue file:\n";
-   foreach $Reason (sort {$a cmp $b} keys %QueueWriteError) {
-      print "   $Reason : $QueueWriteError{$Reason} Time(s)\n";
+   if ($Detail >= 5) {
+      print "\n\nError writing queue file:\n";
+      foreach $Reason (sort {$a cmp $b} keys %QueueWriteError) {
+         print "   $Reason : $QueueWriteError{$Reason} Time(s)\n";
+      }
+   }
+   else {
+      $n=0;
+      foreach $Reason (keys %QueueWriteError) {
+         $n+=$QueueWriteError{$Reason};
+      }
+      print "\n\nError writing queue file: $n Time(s)";
    }
 }
 
 if (keys %MessageWriteError) {
-   print "\n\nError writing message file:\n";
-   foreach $Reason (sort {$a cmp $b} keys %MessageWriteError) {
-      print "   $Reason : $MessageWriteError{$Reason} Time(s)\n";
+   if ($Detail >= 5) {
+      print "\n\nError writing message file:\n";
+      foreach $Reason (sort {$a cmp $b} keys %MessageWriteError) {
+         print "   $Reason : $MessageWriteError{$Reason} Time(s)\n";
+      }
+   }
+   else {
+      $n=0;
+      foreach $Reason (keys %MessageWriteError) {
+         $n+=$MessageWriteError{$Reason};
+      }
+      print "\n\nError writing message file: $n Time(s)";
    }
 }
 
 if (keys %DatabaseGeneration) {
-   print "\n\nDatabase files are not up-to-date (propably rehash is needed):\n";
-   foreach $Source (sort {$a cmp $b} keys %DatabaseGeneration) {
-      print "   $Source : $DatabaseGeneration{$Source} Time(s)\n";
+   if ($Detail >= 5) {
+      print "\n\nDatabase files are not up-to-date (propably rehash is needed):\n";
+      foreach $Source (sort {$a cmp $b} keys %DatabaseGeneration) {
+         print "   $Source : $DatabaseGeneration{$Source} Time(s)\n";
+      }
+   }
+   else {
+      $n=0;
+      $fn=scalar(keys %DatabaseGeneration);
+      foreach $Source (keys %DatabaseGeneration) {
+         $n+=$DatabaseGeneration{$Source};
+      }
+      print "\n\nDatabase files are not up-to-date (propably rehash is needed): $fn File(s), $n Time(s)";
    }
 }
 
 if (keys %PixWorkaround) {
-   print "\n\nEnabled PIX <CRLF>.<CRLF> workaround for:\n";
-   foreach $Host (sort {$a cmp $b} keys %PixWorkaround) {
-      print "   $Host : $PixWorkaround{$Host} Time(s)\n";
+   if ($Detail >= 5) {
+      print "\n\nEnabled PIX <CRLF>.<CRLF> workaround for:\n";
+      foreach $Host (sort {$a cmp $b} keys %PixWorkaround) {
+         print "   $Host : $PixWorkaround{$Host} Time(s)\n";
+      }
+   }
+   else {
+      $n=0;
+      $hn=scalar(keys %PixWorkaround);
+      foreach $Host (keys %PixWorkaround) {
+         $n+=$PixWorkaround{$Host};
+      }
+      print "\n\nEnabled PIX <CRLF>.<CRLF> workaround for: $hn Host(s), $n Time(s)";
    }
 }
 
-if (keys %SentBy) {
+if (($Detail >=5) and (keys %SentBy)) {
    print "\n\nTop ten senders:\n";
    foreach $ThisSender (sort {$a cmp $b} keys %SentBy) {
       $ThisNumber = $SentBy{$ThisSender};
@@ -406,136 +440,307 @@
    }
 }
 
-if (($Detail >= 5) and (keys %UnknownUsers)) {
-   print "\n\nUnknown users:\n";
-   foreach $ThisOne (sort {$a cmp $b} keys %UnknownUsers) {
-      print "   $ThisOne : $UnknownUsers{$ThisOne} Time(s)\n";
+if (keys %UnknownUsers) {
+   if ($Detail >= 10) {
+      print "\n\nUnknown users:\n";
+      foreach $ThisOne (sort {$a cmp $b} keys %UnknownUsers) {
+         print "   $ThisOne : $UnknownUsers{$ThisOne} Time(s)\n";
+      }
+   }
+   else {
+      $n=0;
+      $un=scalar(keys %UnknownUsers);
+      foreach $ThisOne (keys %UnknownUsers) {
+         $n+=$UnknownUsers{$ThisOne};
+      }
+      print "\n\nUnknown users: $un, $n Time(s)";
    }
 }
 
 if (keys %SaslAuthenticationFail) {
-   print "\n\nSASL Authentication failed from:\n";
-   foreach $Host (sort {$a cmp $b} keys %SaslAuthenticationFail) {
-      print "   $Host : $SaslAuthenticationFail{$Host} Time(s)\n";
+   if ($Detail >= 5) {
+      print "\n\nSASL Authentication failed from:\n";
+      foreach $Host (sort {$a cmp $b} keys %SaslAuthenticationFail) {
+         print "   $Host : $SaslAuthenticationFail{$Host} Time(s)\n";
+      }
+   }
+   else {
+      $n=0;
+      $hn=scalar(keys %SaslAuthenticationFail);
+      foreach $Host (keys %SaslAuthenticationFail) {
+         $n+=$SaslAuthenticationFail{$Host};
+      }
+      print "\n\nSASL Authentication failed from: $hn Host(s), $n Time(s)";
    }
 }
 
 if (keys %SaslAuth) {
-   print "\n\nSASL Authenticated messages from:\n";
-   foreach $Host (sort {$a cmp $b} keys %SaslAuth) {
-      print "    $Host:\n";
-      foreach $User (sort {$a cmp $b} keys %{$SaslAuth{$Host}} ) {
-         print "        sasluser $User : $SaslAuth{$Host}{$User} Times(s)\n";
+   if ($Detail >= 5) {
+      print "\n\nSASL Authenticated messages from:\n";
+      foreach $Host (sort {$a cmp $b} keys %SaslAuth) {
+         if ($Detail >= 10) {
+            print "    $Host:\n";
+            foreach $User (sort {$a cmp $b} keys %{$SaslAuth{$Host}} ) {
+               print "        sasluser $User : $SaslAuth{$Host}{$User} Times(s)\n";
+            }
+         }
+         else {
+            $n=0;
+            foreach $User (keys %{$SaslAuth{$Host}} ) {
+               $n+=$SaslAuth{$Host}{$User};
+            }
+            print "    $Host: $n Time(s)\n";
+         }
       }
    }
+   else {
+      $n=0;
+      $hn=scalar(keys %SaslAuth);
+      foreach $Host (keys %SaslAuth) {
+         foreach $User (keys %{$SaslAuth{$Host}} ) {
+            $n+=$SaslAuth{$Host}{$User};
+         }
+      }
+      print "\n\nSASL Authenticated messages from: $hn Host(s), $n Time(s)";
+   }
 }
 
 if (keys %TLSconnectFrom) {
-   print "\n\nTLS Connections from:\n";
-   foreach $Host (sort {$a cmp $b} keys %TLSconnectFrom) {
-      print "   $Host : $TLSconnectFrom{$Host} Time(s)\n";
+   if ($Detail >= 5) {
+      print "\n\nTLS Connections from:\n";
+      foreach $Host (sort {$a cmp $b} keys %TLSconnectFrom) {
+         print "   $Host : $TLSconnectFrom{$Host} Time(s)\n";
+      }
+   }
+   else {
+      $n=0;
+      $hn=scalar(keys %TLSconnectFrom);
+      foreach $Host (keys %TLSconnectFrom) {
+         $n+=$TLSconnectFrom{$Host};
+      }
+      print "\n\nTLS Connections from: $hn Host(s), $n Time(s)";
    }
 }
 
 if (keys %TLSconnectTo) {
-   print "\n\nTLS Connections To:\n";
-   foreach $Host (sort {$a cmp $b} keys %TLSconnectTo) {
-      print "   $Host : $TLSconnectTo{$Host} Time(s)\n";
+   if ($Detail >= 5) {
+      print "\n\nTLS Connections to:\n";
+      foreach $Host (sort {$a cmp $b} keys %TLSconnectTo) {
+         print "   $Host : $TLSconnectTo{$Host} Time(s)\n";
+      }
+   }
+   else {
+      $n=0;
+      $hn=scalar(keys %TLSconnectTo);
+      foreach $Host (keys %TLSconnectTo) {
+         $n=$TLSconnectTo{$Host};
+      }
+      print "\n\nTLS Connections to: $hn Host(s), $n Time(s)";
    }
 }
 
 if (keys %TLSunverified) {
-   print "\n\nUnverified TLS certificates:\n";
-   foreach $Cert (sort {$a cmp $b} keys %TLSunverified) {
-      print "   $Cert : $TLSunverified{$Cert} Time(s)\n";
+   if ($Detail >= 5) {
+      print "\n\nUnverified TLS certificates:\n";
+      foreach $Cert (sort {$a cmp $b} keys %TLSunverified) {
+         print "   $Cert : $TLSunverified{$Cert} Time(s)\n";
+      }
+   }
+   else {
+      $n=0;
+      $cn=scalar(keys %TLSunverified);
+      foreach $Cert (keys %TLSunverified) {
+         $n+=$TLSunverified{$Cert};
+      }
+      print "\n\nUnverified TLS certificates: $cn, $n Time(s)";
    }
 }
 
 if (keys %RelayDenied) {
-   print "\n\nRelaying denied:\n";
-   foreach $ThisOne (sort {$a cmp $b} keys %RelayDenied) {
-      print "   $ThisOne : $RelayDenied{$ThisOne} Time(s)\n";
+   if ($Detail >= 5) {
+      print "\n\nRelaying denied:\n";
+      foreach $ThisOne (sort {$a cmp $b} keys %RelayDenied) {
+         print "   $ThisOne : $RelayDenied{$ThisOne} Time(s)\n";
+      }
+   }
+   else {
+      $n=0;
+      foreach $ThisOne (keys %RelayDenied) {
+         $n+=$RelayDenied{$ThisOne};
+      }
+      print "\n\nRelaying denied: $n Time(s)";
    }
 }
 
 if (keys %SizeLimit) {
-   print "\n\nMessage size exceeds fixed limit:\n";
-   foreach $Message (sort {$a cmp $b} keys %SizeLimit) {
-      print "   $Message: $SizeLimit{$Message} Time(s)\n";
+   if ($Detail >= 5) {
+      print "\n\nMessage size exceeds fixed limit:\n";
+      foreach $Message (sort {$a cmp $b} keys %SizeLimit) {
+         print "   $Message: $SizeLimit{$Message} Time(s)\n";
+      }
+   }
+   else {
+      $n=0;
+      $mn=scalar(keys %SizeLimit);
+      foreach $Message (keys %SizeLimit) {
+         $n+=$SizeLimit{$Message};
+      }
+      print "\n\nMessage size exceeds fixed limit: $mn Message(s), $n Time(s)";
    }
 }
 
 if (keys %LocalBounce) {
-   print "\n\nLocal Bounce:\n";
-   foreach $ThisOne (sort {$a cmp $b} keys %LocalBounce) {
-      print "   $ThisOne : $LocalBounce{$ThisOne} Time(s)\n";
+   if ($Detail >= 5) {
+      print "\n\nLocal Bounce:\n";
+      foreach $ThisOne (sort {$a cmp $b} keys %LocalBounce) {
+         print "   $ThisOne : $LocalBounce{$ThisOne} Time(s)\n";
+      }
+   }
+   else {
+      $n=0;
+      $bn=scalar(keys %LocalBounce);
+      foreach $ThisOne (keys %LocalBounce) {
+         $n+=$LocalBounce{$ThisOne};
+      }
+      print "\n\nLocal Bounces: $bn, $n Time(s)";
    }
 }
 
 if (keys %ForeignBounce) {
-   print "\n\nForeign Bounce:\n";
-   foreach $ThisOne (sort {$a cmp $b} keys %ForeignBounce) {
-      print "   $ThisOne : $ForeignBounce{$ThisOne} Time(s)\n";
+   if ($Detail >= 5) {
+      print "\n\nForeign Bounce:\n";
+      foreach $ThisOne (sort {$a cmp $b} keys %ForeignBounce) {
+         print "   $ThisOne : $ForeignBounce{$ThisOne} Time(s)\n";
+      }
+   }
+   else {
+      $n=0;
+      $bn=scalar(keys %ForeignBounce);
+      foreach $ThisOne (keys %ForeignBounce) {
+         $n+=$ForeignBounce{$ThisOne};
+      }
+      print "\n\nForeign Bounce: $bn, $n Time(s)";
    }
 }
 
-if (($Detail >= 5) and (keys %HeaderReject)) {
-   print "\n\nHeader content reject:\n";
-   foreach $Reason (sort {$a cmp $b} keys %HeaderReject) {
-      print "   $Reason:";
-      foreach $Rejected (sort {$a cmp $b} keys %{$HeaderReject{$Reason}} ) {
-         print "      $Rejected : $HeaderReject{$Reason}{$Rejected} Time(s)\n";
+if (keys %HeaderReject) {
+   if ($Detail >= 10) {
+      print "\n\nHeader content reject:\n";
+      foreach $Reason (sort {$a cmp $b} keys %HeaderReject) {
+         print "   $Reason:";
+         foreach $Rejected (sort {$a cmp $b} keys %{$HeaderReject{$Reason}} ) {
+            print "      $Rejected : $HeaderReject{$Reason}{$Rejected} Time(s)\n";
+         }
       }
    }
+   else {
+      $n=0;
+      $rn=scalar(keys %HeaderReject);
+      foreach $Reason (keys %HeaderReject) {
+         foreach $Rejected (keys %{$HeaderReject{$Reason}} ) {
+            $n+=$HeaderReject{$Reason}{$Rejected};
+         }
+      }
+      print "\n\nHeader content rejected: $rn Reason(s), $n Time(s)";
+   }
 }
 
-if (($Detail >= 5) and (keys %HeaderWarning)) {
-   print "\n\nHeader content warning (but passed):\n";
-   foreach $Reason (sort {$a cmp $b} keys %HeaderWarning) {
-      print "   $Reason:";
-      foreach $Warning (sort {$a cmp $b} keys %{$HeaderWarning{$Reason}} ) {
-         print "      $Warning : $HeaderWarning{$Reason}{$Warning} Time(s)\n";
+if (keys %HeaderWarning) {
+   if ($Detail >= 10) {
+      print "\n\nHeader content warning (but passed):\n";
+      foreach $Reason (sort {$a cmp $b} keys %HeaderWarning) {
+         print "   $Reason:";
+         foreach $Warning (sort {$a cmp $b} keys %{$HeaderWarning{$Reason}} ) {
+            print "      $Warning : $HeaderWarning{$Reason}{$Warning} Time(s)\n";
+         }
+      }
+   }
+   else {
+      $n=0;
+      $rn=scalar(keys %HeaderWarning);
+      foreach $Reason (keys %HeaderWarning) {
+         foreach $Warning (keys %{$HeaderWarning{$Reason}} ) {
+            $n+=$HeaderWarning{$Reason}{$Warning};
+         }
       }
+      print "\n\nHeader content warning (but passed): $rn Reason(s), $n Time(s)";
    }
 }
 
 if ($RejectClients > 0) {
-   print "\n\nClient hosts rejected $RejectClients Time(s)\n";
-   foreach $Host (sort {$a cmp $b} keys %RejectClientHost) {
-      print "   $Host $RejectClientHost{$Host} Time(s)\n";
+   if ($Detail >= 5) {
+      print "\n\nClient hosts rejected $RejectClients Time(s)\n";
+      foreach $Host (sort {$a cmp $b} keys %RejectClientHost) {
+         print "   $Host $RejectClientHost{$Host} Time(s)\n";
+      }
+   }
+   else {
+      $n=0;
+      foreach $Host (keys %RejectClientHost) {
+         $n+=$RejectClientHost{$Host};
+      }
+      print "\n\nClient hosts rejected $RejectClients Time(s): $n Host(s)";
    }
 }
 
 if (keys %RejectSender) {
    print "\n\nMessages rejected:\n";
    foreach $Reason (sort {$a cmp $b} keys %RejectSender) {
-      print "    $Reason $RejectSenderReason{$Reason} Time(s)\n";
-      foreach $Host (sort {$a cmp $b} keys %{$RejectSender{$Reason}} ) {
-         print "        $Host $RejectSenderHost{$Reason}{$Host} Time(s)\n";
-         if ($Detail >= 5) {
-            foreach $Sender (sort {$a cmp $b} keys %{$RejectSender{$Reason}{$Host}}) {
-               print "           $Sender : $RejectSender{$Reason}{$Host}{$Sender} Time(s)\n";
+      if ($Detail >= 5) {
+         print "    $Reason $RejectSenderReason{$Reason} Time(s)\n";
+         foreach $Host (sort {$a cmp $b} keys %{$RejectSender{$Reason}} ) {
+            print "        $Host $RejectSenderHost{$Reason}{$Host} Time(s)\n";
+            if ($Detail >= 10) {
+               foreach $Sender (sort {$a cmp $b} keys %{$RejectSender{$Reason}{$Host}}) {
+                  print "           $Sender : $RejectSender{$Reason}{$Host}{$Sender} Time(s)\n";
+               }
             }
          }
       }
+      else {
+         $n=0;
+         $hn=scalar(keys %{$RejectSender{$Reason}});
+         print "    $Reason: $hn Host(s), $RejectSenderReason{$Reason} Time(s)\n";
+      }
    }
 }
 
 if (keys %RejectRecip) {
-   print "\n\nMessages rejected to recipient:\n";
-   foreach $Recip (sort {$a cmp $b} keys %RejectRecip) {
-      print "    $Recip:\n";
-      foreach $Host (sort {$a cmp $b} keys %{$RejectRecip{$Recip}} ) {
-         print "        $Host : $RejectRecip{$Recip}{$Host} Time(s)\n";
+   if ($Detail >= 5) {
+      print "\n\nMessages rejected to recipient:\n";
+      foreach $Recip (sort {$a cmp $b} keys %RejectRecip) {
+         print "    $Recip:\n";
+         foreach $Host (sort {$a cmp $b} keys %{$RejectRecip{$Recip}} ) {
+            print "        $Host : $RejectRecip{$Recip}{$Host} Time(s)\n";
+         }
       }
    }
+   else {
+      $n=0;
+      $rn=scalar(keys %RejectRecip);
+      foreach $Recip (keys %RejectRecip) {
+         foreach $Host (keys %{$RejectRecip{$Recip}} ) {
+            $n+=$RejectRecip{$Recip}{$Host};
+         }
+      }
+      print "\n\nMessages rejected to: $rn Recipient(s), $n Time(s)";
+   }
 }
 
-
 if (keys %RejectAddress) {
-   print "\n\nRejected sender address from:\n";
-   foreach $Host (sort {$a cmp $b} keys %RejectAddress) {
-      print "   $Host : $RejectAddress{$Host} Time(s)\n";
+   if ($Detail >= 5) {
+      print "\n\nRejected sender address from:\n";
+      foreach $Host (sort {$a cmp $b} keys %RejectAddress) {
+         print "   $Host : $RejectAddress{$Host} Time(s)\n";
+      }
+   }
+   else {
+      $n=0;
+      $hn=scalar(keys %RejectAddress);
+      foreach $Host (keys %RejectAddress) {
+         $n+=$RejectAddress{$Host};
+      }
+      print "\n\nRejected sender address from: $hn Host(s), $n Time(s)";
    }
 }
 
@@ -550,33 +755,57 @@
       foreach $Host ( keys %{$RejectRBL{$Site}} ) {
          $count = $count + $RejectRBL{$Site}{$Host};
       }
-      print "    $Site identified $count spam messages:\n";
-      foreach $Host (sort {$a cmp $b} keys %{$RejectRBL{$Site}} ) {
-         print "      $Host : $RejectRBL{$Site}{$Host} Time(s)\n";
+      if ($Detail >= 5) {
+         print "    $Site identified $count spam messages:\n";
+         foreach $Host (sort {$a cmp $b} keys %{$RejectRBL{$Site}} ) {
+            print "      $Host : $RejectRBL{$Site}{$Host} Time(s)\n";
+         }
+      }
+      else {
+         print "    $Site identified $count spam messages.\n";
       }
    }
 }
 
 if (keys %RBLError) {
-   print "\n\nRBL lookup errors $ErrorRBL Time(s)\n";
-   foreach $Site (sort {$a cmp $b} keys %RBLError) {
-      print "   $Site\n";
-      if ($Detail >= 5) {
-         foreach $Error (sort {$a cmp $b} keys %{$RBLError{$Site}} ) {
-            print "      $Error : $RBLError{$Site}{$Error} Time(s)\n";
+   if ($Detail >= 5) {
+      print "\n\nRBL lookup errors $ErrorRBL Time(s)\n";
+      foreach $Site (sort {$a cmp $b} keys %RBLError) {
+         print "   $Site\n";
+         if ($Detail >= 10) {
+            foreach $Error (sort {$a cmp $b} keys %{$RBLError{$Site}} ) {
+               print "      $Error : $RBLError{$Site}{$Error} Time(s)\n";
+            }
          }
       }
    }
+   else {
+      $n=0;
+      $hn=scalar(keys %RBLError);
+      print "\n\nRBL lookup errors for $hn Host(s), $ErrorRBL Time(s)";
+   }
 }
 
 if (keys %Discarded) {
-   print "\n\nDiscarded messages:\n";
-   foreach $Host (sort {$a cmp $b} keys %Discarded) {
-      print "   $Host\n";
-      foreach $Reason (sort {$a cmp $b} keys %{$Discarded{$Host}} ) {
-         print "      $Reason : $Discarded{$Host}{$Reason} Time(s)\n";
+   if ($Detail >= 5) {
+      print "\n\nDiscarded messages:\n";
+      foreach $Recipient (sort {$a cmp $b} keys %Discarded) {
+         print "   $Recipient\n";
+         foreach $Reason (sort {$a cmp $b} keys %{$Discarded{$Recipient}} ) {
+            print "      $Reason : $Discarded{$Recipient}{$Reason} Time(s)\n";
+         }
       }
    }
+   else {
+      $n=0;
+      $rn=scalar(keys %Discarded);
+      foreach $Recipient (keys %Discarded) {
+         foreach $Reason (keys %{$Discarded{$Recipient}} ) {
+            $n+=$Discarded{$Recipient}{$Reason};
+         }
+      }
+      print "\n\nDiscarded messages to: $rn Recipient(s), $n Time(s)";
+   }
 }
 
 if (keys %AuthWarns) {
@@ -593,7 +822,7 @@
    }
 }
 
-if (($Detail >= 5) and (keys %SmtpConversationError)) {
+if (($Detail >= 10) and (keys %SmtpConversationError)) {
    print "\n\nSMTP commands dialog errors:\n";
    foreach $Error (sort {$a cmp $b} keys %SmtpConversationError) {
       print "   $Error:\n";
@@ -604,13 +833,25 @@
 }
 
 if (keys %TooManyErrors) {
-   print "\n\nToo many errors in SMTP commands dialog:\n";
-   foreach $Command(sort {$a cmp $b} keys %TooManyErrors) {
-      print "   After command $Command:\n";
-      foreach $Host (sort {$a cmp $b} keys %{$TooManyErrors{$Command}} ) {
-         print "      $Host : $TooManyErrors{$Command}{$Host} Time(s)\n";
+   if ($Detail >= 5) {
+      print "\n\nToo many errors in SMTP commands dialog:\n";
+      foreach $Command(sort {$a cmp $b} keys %TooManyErrors) {
+         print "   After command $Command:\n";
+         foreach $Host (sort {$a cmp $b} keys %{$TooManyErrors{$Command}} ) {
+            print "      $Host : $TooManyErrors{$Command}{$Host} Time(s)\n";
+         }
       }
    }
+   else {
+      $n=0;
+      $cn=scalar(keys %TooManyErrors);
+      foreach $Command(sort {$a cmp $b} keys %TooManyErrors) {
+         foreach $Host (sort {$a cmp $b} keys %{$TooManyErrors{$Command}} ) {
+            $n+=$TooManyErrors{$Command}{$Host};
+         }
+      }
+      print "\n\nToo many errors in SMTP commands dialog: $cn Command(s), $n Time(s)";
+   }
 }
 
 if (keys %ConnectionLost) {
@@ -620,27 +861,57 @@
    }
 }
 
-if (($Detail >= 5) and (keys %MxError)) {
-   print "\n\nMalformed domain name in resource data of MX record:\n";
-   foreach $Domain (sort {$a cmp $b} keys %MxError) {
-      print "   $Domain : $MxError{$Domain} Time(s)\n";
+if (keys %MxError) {
+   if ($Detail >= 10) {
+      print "\n\nMalformed domain name in resource data of MX record:\n";
+      foreach $Domain (sort {$a cmp $b} keys %MxError) {
+         print "   $Domain : $MxError{$Domain} Time(s)\n";
+      }
+   }
+   else {
+      $n=0;
+      $dn=scalar(keys %MxError);
+      foreach $Domain (keys %MxError) {
+         $n+=$MxError{$Domain};
+      }
+      print "\n\nMalformed domain name in resource data of MX record: $dn Domain(s), $n Time(s)";
    }
 }
 
 if (%IllegalAddressSyntax) {
    print "\n\nIllegal address syntax:\n";
    foreach $Command (sort {$a cmp $b} keys %IllegalAddressSyntax) {
-      print "   In command $Command from:\n";
-      foreach $Host (sort {$a cmp $b} keys %{$IllegalAddressSyntax{$Command}} ) {
-         print "      $Host : $IllegalAddressSyntax{$Command}{$Host} Time(s)\n";
+      if ($Detail >= 5) {
+         print "   In command $Command from:\n";
+         foreach $Host (sort {$a cmp $b} keys %{$IllegalAddressSyntax{$Command}} ) {
+            print "      $Host : $IllegalAddressSyntax{$Command}{$Host} Time(s)\n";
+         }
+      }
+      else {
+         $n=0;
+         $hn=scalar(keys %{$IllegalAddressSyntax{$Command}});
+         foreach $Host (keys %{$IllegalAddressSyntax{$Command}}) {
+            $n+=$IllegalAddressSyntax{$Command}{$Host};
+         }
+         print "   In command $Command from: $hn Host(s), $n Time(s)\n";
       }
    }
 }
 
 if (keys %HostnameVerification) {
-   print "\n\nHostname verification errors:\n";
-   foreach $Error (sort {$a cmp $b} keys %HostnameVerification) {
-      print "   $Error : $HostnameVerification{$Error} Time(s)\n";
+   if ($Detail >= 2) {
+      print "\n\nHostname verification errors:\n";
+      foreach $Error (sort {$a cmp $b} keys %HostnameVerification) {
+         print "   $Error : $HostnameVerification{$Error} Time(s)\n";
+      }
+   }
+   else{
+      $n=0;
+      $en=scalar(keys %HostnameVerification);
+      foreach $Error (keys %HostnameVerification) {
+         $n+=$HostnameVerification{$Error};
+      }
+      print "\n\nHostname verification errors: $en Error(s), $n Time(s)";
    }
 }
 
@@ -652,16 +923,39 @@
 }
 
 if (keys %ValidHostname) {
-   print "\n\nHostname validation errors:\n";
-   foreach $Message (sort {$a cmp $b} keys %ValidHostname) {
-      print "   $Message : $ValidHostname{$Message} Time(s)\n";
+   if ($Detail >= 2) {
+      print "\n\nHostname validation errors:\n";
+      foreach $Message (sort {$a cmp $b} keys %ValidHostname) {
+         print "   $Message : $ValidHostname{$Message} Time(s)\n";
+      }
+   }
+   else{
+      $n=0;
+      $mn=scalar(keys %ValidHostname);
+      foreach $Message (keys %ValidHostname) {
+         $n+=$ValidHostname{$Message};
+      }
+      print "\n\nHostname validation errors: $mn Message(s), $n Time(s)";
    }
 }
 
 if (keys %HeloError) {
    print "\n\nErrors in HELO/EHLO conversation:\n";
    foreach $Error (sort {$a cmp $b} keys %HeloError) {
-      print "   $Error : $HeloError{$Error} Time(s)\n";
+      if ($Detail >= 5) {
+         print "   $Error:\n";
+         foreach $Host (sort {$a cmp $b} keys %{$HeloError{$Error}} ) {
+            print "      $Host : $HeloError{$Error}{$Host} Time(s)\n";
+         }
+      }
+      else {
+         $n=0;
+         $hn=scalar(keys %{$HeloError{$Error}});
+         foreach $Host (keys %{$HeloError{$Error}} ) {
+            $n+=$HeloError{$Error}{$Host};
+         }
+         print "   $Error: from $hn Host(s), $n Time(s)\n";
+      }
    }
 }
 
