--- named	Thu Jul 29 21:33:29 2004
+++ named-1.41	Wed Sep 29 15:37:22 2004
@@ -1,7 +1,12 @@
 ##########################################################################
-# $Id$
+# $Id$
 ##########################################################################
 # $Log$
+# Revision 1.41  2004/09/29 10:33:29  laurent Dufour <laurent.dufour@havas.com>
+# Removed some ^ in regex to prevent message not being in start on line to be matched
+# Added some check for error in named zone config file
+# Added some check for message not being matched
+#
 # Revision 1.4  2004/07/29 19:33:29  mgt
 # Chmod and removed perl call -mgt
 #
@@ -44,47 +49,48 @@
 while (defined($ThisLine = <STDIN>)) {
    if (
       ($ThisLine =~ /RR negative cache entry/) or
-      ($ThisLine =~ /^ns_....: .* NS points to CNAME/) or
-      ($ThisLine =~ /^accept: connection reset by peer/) or
+      ($ThisLine =~ /ns_....: .* NS points to CNAME/) or
+      ($ThisLine =~ /accept: connection reset by peer/) or
       ($ThisLine =~ /Connection reset by peer/) or
       ($ThisLine =~ /transfered serial/) or
-      ($ThisLine =~ /^There may be a name server already running/) or
-      ($ThisLine =~ /^exiting/) or
-      ($ThisLine =~ /^NSTATS /) or
+      ($ThisLine =~ /There may be a name server already running/) or
+      ($ThisLine =~ /exiting/) or
+      ($ThisLine =~ /running/) or
+      ($ThisLine =~ /NSTATS /) or
       ($ThisLine =~ /Cleaned cache of \d+ RRs/) or
       ($ThisLine =~ /USAGE \d+ \d+ CPU=\d+.*/) or
-      ($ThisLine =~ /^XSTATS /) or
-      ($ThisLine =~ /^Ready to answer queries/) or
-      ($ThisLine =~ /^Forwarding source address is/) or
-      ($ThisLine =~ /^bad referral/) or
+      ($ThisLine =~ /XSTATS /) or
+      ($ThisLine =~ /Ready to answer queries/) or
+      ($ThisLine =~ /Forwarding source address is/) or
+      ($ThisLine =~ /bad referral/) or
       ($ThisLine =~ /prerequisite not satisfied/) or
-      ($ThisLine =~ /^(rcvd|Sent) NOTIFY/) or
-      ($ThisLine =~ /^ns_resp: TCP truncated/) or
+      ($ThisLine =~ /(rcvd|Sent) NOTIFY/) or
+      ($ThisLine =~ /ns_resp: TCP truncated/) or
       ($ThisLine =~ /No possible A RRs/) or
       ($ThisLine =~ /points to a CNAME/) or
-      ($ThisLine =~ /^dangling CNAME pointer/) or
-      ($ThisLine =~ /^listening on/) or
-      ($ThisLine =~ /^unrelated additional info/) or
-      ($ThisLine =~ /^Response from unexpected source/) or
-      ($ThisLine =~ /^No root nameservers for class IN/) or
-      ($ThisLine =~ /^recvfrom: No route to host/) or
+      ($ThisLine =~ /dangling CNAME pointer/) or
+      ($ThisLine =~ /listening on/) or
+      ($ThisLine =~ /unrelated additional info/) or
+      ($ThisLine =~ /Response from unexpected source/) or
+      ($ThisLine =~ /No root nameservers for class IN/) or
+      ($ThisLine =~ /recvfrom: No route to host/) or
       ($ThisLine =~ /Connection refused/) or
       ($ThisLine =~ /lame server resolving/) or
       ($ThisLine =~ /transfer of/) or
-      ($ThisLine =~ /^using \d+ CPU/) or
-      ($ThisLine =~ /^loading configuration/) or
-      ($ThisLine =~ /^command channel listening/) or
-      ($ThisLine =~ /^no IPv6 interfaces found/) or
+      ($ThisLine =~ /using \d+ CPU/) or
+      ($ThisLine =~ /loading configuration/) or
+      ($ThisLine =~ /command channel listening/) or
+      ($ThisLine =~ /no IPv6 interfaces found/) or
       ($ThisLine =~ /^running/) or
       ($ThisLine =~ /^exiting/) or
-      ($ThisLine =~ /^no longer listening/) or
-      ($ThisLine =~ /^the default for the .* option is now/) or
-      ($ThisLine =~ /^stopping command channel on [0-9.#]/) or
-      ($ThisLine =~ /^Malformed response from/) or
+      ($ThisLine =~ /no longer listening/) or
+      ($ThisLine =~ /the default for the .* option is now/) or
+      ($ThisLine =~ /stopping command channel on [0-9.#]/) or
+      ($ThisLine =~ /Malformed response from/) or
       ($ThisLine =~ /client .+#\d+: query:/) or
       # Do we really want to ignore these?
       #($ThisLine =~ /unknown logging category/) or
-      ($ThisLine =~ /^could not open entropy source/) or
+      ($ThisLine =~ /could not open entropy source/) or
       ($ThisLine =~ /\/etc\/rndc.key: file not found/) or
       ($ThisLine =~ /sending notifies/) or
       # file syntax error get reported twice and are already caught below
@@ -92,17 +98,17 @@
    ) {
       # Don't care about these...
    } elsif (
-      ($ThisLine =~ /^starting\..*named/) or
-      ($ThisLine =~ /^starting BIND/) or
-      ($ThisLine =~ /^named startup succeeded/)
+      ($ThisLine =~ /starting\..*named/) or
+      ($ThisLine =~ /starting BIND/) or
+      ($ThisLine =~ /named startup succeeded/)
    ) {
       $StartNamed++;
-   } elsif ( $ThisLine =~ /^(reloading nameserver|named reload succeeded)/ ) {
+   } elsif ( $ThisLine =~ /(reloading nameserver|named reload succeeded)/ ) {
       $ReloadNamed++;
    } elsif (
-      ($ThisLine =~ /^shutting down/) or
-      ($ThisLine =~ /^named shutting down/ ) or
-      ($ThisLine =~ /^named shutdown succeeded/ )
+      ($ThisLine =~ /shutting down/) or
+      ($ThisLine =~ /named shutting down/ ) or
+      ($ThisLine =~ /named shutdown succeeded/ )
    ) {
       $ShutdownNamed++;
    } elsif ( ($Host, $Zone) = ( $ThisLine =~ /client ([^\#]+)#[^\:]+: zone transfer '(.+)' denied/ ) ) {
@@ -119,43 +125,50 @@
       $ZoneLoaded{"secondary $Zone"}++;
    } elsif ( ($Zone) = ( $ThisLine =~ /slave zone \"(.+)\" .* loaded/ ) ) {
       $ZoneLoaded{"secondary $Zone"}++;
-   } elsif ( ($Zone) = ( $ThisLine =~ /^zone (.+)\: loaded serial/ ) ) {
+   } elsif ( ($Zone) = ( $ThisLine =~ /zone (.+)\: loaded serial/ ) ) {
       $ZoneLoaded{$Zone}++;
    } elsif ( (undef,$Addr,undef,$Server) = ( $ThisLine =~ /ame server (on|resolving) '(.+)' \(in .+\):\s+(\[.+\]\.\d+)?\s*'?(.+)'?:?/ ) ) {
       $LameServer{"$Addr ($Server)"}++;
    } elsif ( ($Zone) = ( $ThisLine =~ /Zone \"(.+)\" was removed/ ) ) {
       $ZoneRemoved{$Zone}++;
-   } elsif ( ($Host) = ( $ThisLine =~ /^([^ ]+) has CNAME and other data \(invalid\)/ ) ) {
+   } elsif ( ($Zone) = ( $ThisLine =~ /info: received notify for zone '(.*)'/ ) ) {
+      $ZoneReceivedNotify{$Zone}++;
+   } elsif ( ($Host) = ( $ThisLine =~ /([^ ]+) has CNAME and other data \(invalid\)/ ) ) {
       push @CNAMEAndOther, $Host;
    } elsif ( ($File,$Line,$Entry,$Error) = ( $ThisLine =~ /dns_master_load: ([^:]+):(\d+): ([^ ]+): (.+)$/ ) ) {
       $ZoneFileErrors{$File}{"$Entry: $Error"}++;
-   } elsif ( ($Way,$Host) = ( $ThisLine =~ /^([^ ]+): sendto\(\[([^ ]+)\].+\): Network is unreachable/ ) ) {
+   } elsif ( ($File,$Line,$Entry,$Error) = ( $ThisLine =~ /warning: ([^:]+):(\d+): (.+)$/ ) ) {
+      $ZoneFileErrors{$File}{"file does not end with newline: $Error"}++;
+   } elsif ( ($Way,$Host) = ( $ThisLine =~ /([^ ]+): sendto\(\[([^ ]+)\].+\): Network is unreachable/ ) ) {
       $FullHost = LookupIP ($Host);
       $NetworkUnreachable{$Way}{$FullHost}++;
-   } elsif ( ($Zone,$Message) = ( $ThisLine =~ /^client [^\#]+#[^\:]+: updating zone '([^\:]+)': (.*)$/ ) ) {
+   } elsif ( ($Zone,$Message) = ( $ThisLine =~ /client [^\#]+#[^\:]+: updating zone '([^\:]+)': (.*)$/ ) ) {
       $ZoneUpdates{$Zone}{$Message}++;
    } elsif ( ($Host,$Zone) = ( $ThisLine =~ /approved AXFR from \[(.+)\]\..+ for \"(.+)\"/ ) ) {
       $FullHost = LookupIP ($Host);
       $AXFR{$Zone}{$FullHost}++;
+   } elsif ( ($Client) = ( $ThisLine =~ /warning: client (.*) no more TCP clients/ ) ) {
+      $FullClient = LookupIP ($Client);
+      $DeniedTCPClientQuery{$FullClient}++;
    } elsif ( ($Client) = ( $ThisLine =~ /client (.*)#\d+: query \(cache\) denied/ ) ) {
       $FullClient = LookupIP ($Client);
       $DeniedQuery{$FullClient}++;
-   } elsif ( ($Rhost, $Ldom) = ($ThisLine =~ /^client ([\d\.]+)#\d+: update '(.*)' denied/)) {
+   } elsif ( ($Rhost, $Ldom) = ($ThisLine =~ /client ([\d\.]+)#\d+: update '(.*)' denied/)) {
       $UpdateDenied{"$Rhost ($Ldom)"}++;
-   } elsif ( ($Zone) = ($ThisLine =~ /^zone '([0-9a-zA-Z.-]+)' allows updates by IP address, which is insecure/)) {
+   } elsif ( ($Zone) = ($ThisLine =~ /zone '([0-9a-zA-Z.-]+)' allows updates by IP address, which is insecure/)) {
       $InsecUpdate{$Zone}++;
-   } elsif ( ($Zone) = ($ThisLine =~ /^zone ([0-9a-zA-Z.\/-]+): journal rollforward failed: journal out of sync with zone/)) {
+   } elsif ( ($Zone) = ($ThisLine =~ /zone ([0-9a-zA-Z.\/-]+): journal rollforward failed: journal out of sync with zone/)) {
       $JournalFail{$Zone}++;
-   } elsif ( ($Channel,$Reason) = ($ThisLine =~ /^couldn't add command channel (.+#\d+): (.*)$/)) {
+   } elsif ( ($Channel,$Reason) = ($ThisLine =~ /couldn't add command channel (.+#\d+): (.*)$/)) {
       $ChannelAddFail{$Channel}{$Reason}++;
-   } elsif ( ($Zone,$Host,$Reason) = ($ThisLine =~ /^zone ([^ ]*)\/IN: refresh: failure trying master ([^ ]*)#\d+: (.*)/) ) {
+   } elsif ( ($Zone,$Host,$Reason) = ($ThisLine =~ /zone ([^ ]*)\/IN: refresh: failure trying master ([^ ]*)#\d+: (.*)/) ) {
       $MasterFailure{"$Zone from $Host"}{$Reason}++;
-   } elsif ( ($Zone) = ($ThisLine =~ /^zone ([^\/]+)\/.+: refresh: non-authoritative answer from master/)) {
+   } elsif ( ($Zone) = ($ThisLine =~ /zone ([^\/]+)\/.+: refresh: non-authoritative answer from master/)) {
       $NonAuthoritative{$Zone}++;
    } else {
       # Report any unmatched entries...
       # remove PID from named messages
-      $ThisLine =~ s/^(client [.0-9]+)\S+/$1/;
+      $ThisLine =~ s/(client [.0-9]+)\S+/$1/;
       chomp($ThisLine);
       $OtherList{$ThisLine}++;
    }
@@ -182,6 +195,13 @@
    }
 }
 
+if ( ( $Detail >= 5 ) and (keys %ZoneReceivedNotify) ) {
+   print "\nZones receiving notify:\n";
+   foreach $ThisOne (sort {$a cmp $b} keys %ZoneReceivedNotify) {
+      print "   $ThisOne: $ZoneReceivedNotify{$ThisOne} Time(s)\n";
+   }
+}
+
 if ( ($Detail >= 5) and (keys %ChannelAddFail) ) {
    print "\nCan't add command channel:\n";
    foreach $Channel (sort {$a cmp $b} keys %ChannelAddFail) {
@@ -230,6 +250,13 @@
    }
 }
 
+if ( ( $Detail >= 5 ) and (keys %DeniedTCPClient) ) {
+   print "\nno more TCP clients warning:\n";
+   foreach $ThisOne (keys %DeniedTCPClient) {
+      print "   from $ThisOne: $DeniedTCPClient{$ThisOne} Time(s)\n";
+   }
+}
+
 if ( ( $Detail >= 5 ) and (keys %DeniedQuery) ) {
    print "\nQueries (cache) that were denied:\n";
    foreach $ThisOne (keys %DeniedQuery) {
