Index: scripts/services/sshd
===================================================================
RCS file: /var/cvs/logwatch/scripts/services/sshd,v
retrieving revision 1.33
diff -u -r1.33 sshd
--- scripts/services/sshd	15 Dec 2003 19:01:19 -0000	1.33
+++ scripts/services/sshd	16 Dec 2003 12:37:40 -0000
@@ -2,6 +2,8 @@
 ##########################################################################
 # $Id$
 ##########################################################################
+# $Log$
+##########################################################################
 
 ########################################################
 # This was written and is maintained by:
@@ -71,8 +73,9 @@
       }
       $BadLogins{"$2/$1 from $3"}++;
    } elsif ( $ThisLine =~ m/^Failed (\S+) for illegal user (\S+) from ([^ ]+) port (\d+)/ ) { #openssh
-      $BadLogins{"$2/$1 from $3"}++;
-      $IllegalUsers{$2}++;
+      $Temp = "$2/$1 from $3";
+      $BadLogins{$Temp}++;
+      $IllegalUsers{$Temp}++;
    } elsif ( ($User) = ($ThisLine =~ /^input_userauth_request: illegal user ([^ ]+)$/ )) {
       $IllegalUsers{"$User/none from unknown"}++;
    } elsif ( $ThisLine =~ m/^Illegal user (\S+) from ([^ ]+)/ ) { #redhat thing
@@ -100,8 +103,10 @@
       if ( $Debug >= 5 ) {
          print STDERR "DEBUG: Found -Listening on port 22- line\n";
       }
-   }
-   elsif ( $ThisLine =~ m/^(log: )?Generating .* \w+ key\./ ) { # ssh/openssh
+   } elsif ( ($Port,$Address,$Reason) = ($ThisLine =~ /^error: Bind to port ([^ ]+) on ([^ ]+) failed: (.+).$/ )) {
+      $Temp = "$Address port $Port ($Reason)";
+      $BindFailed{$Temp}++;
+   } elsif ( $ThisLine =~ m/^(log: )?Generating .* \w+ key\./ ) { # ssh/openssh
       # Don't care about this...
       if ( $Debug >= 5 ) {
          print STDERR "DEBUG: Found -Generating RSA key- line\n";
@@ -129,6 +134,10 @@
       $sftpRequests++;
    } elsif ( $ThisLine =~ m/refused connect from (.*)$/ ) {
       $RefusedConnections{$1}++;
+   } elsif ( ($Reason) = ($ThisLine =~ /^Authentication refused: (.*)$/ ) ) {
+      $RefusedAuthentication{$Reason}++;
+   } elsif ( ($Host,$Reason) = ($ThisLine =~ /^Received disconnect from ([^ ]*): (.*)$/)) {
+      $DisconnectReceived{$Reason}{$Host}++;
    } elsif ( ($IP) = ($ThisLine =~ /^scanned from ([^ ]*)/) ) {
       push @Scanned, LookupIP($IP);
    } else {
@@ -149,16 +158,23 @@
    print "\nSSHD Started: " . $Starts . " Time(s)\n";
 }
 
+if (keys %BindFailed) {
+   print "\nFailed to bind:\n";
+   foreach $ThisOne (sort {$a cmp $b} keys %BindFailed) {
+      print "   $ThisOne : $BindFailed{$Temp} Time(s)\n";
+   }
+}
+
 if ($Detail >= 10) {
    if (keys %NoRevMap) {
       print "\nCouldn't resolve these IPs:\n";
-      foreach $ThisOne (keys %NoRevMap) {
+      foreach $ThisOne (sort {$a cmp $b} keys %NoRevMap) {
          print "   " . $ThisOne . ": " . $NoRevMap{$ThisOne} . " Time(s)\n";
       }
    }
    if (keys %NoIdent) {
       print "\nDidn't receive an ident from these IPs:\n";
-      foreach $ThisOne (keys %NoIdent) {
+      foreach $ThisOne (sort {$a cmp $b} keys %NoIdent) {
          print "   " . $ThisOne . ": " . $NoIdent{$ThisOne} . " Time(s)\n";
       }
    }
@@ -209,6 +225,23 @@
    }
 }
 
+if (keys %RefusedAuthentication) {
+   print "\n\nAuthentication refused:\n";
+   foreach $Reason (sort {$a cmp $b} keys %RefusedAuthentication) {
+      print "   $Reason : $RefusedAuthentication{$Reason} Time(s)\n";
+   }
+}
+
+if (keys %DisconnectReceived) {
+   print "\n\nReceived disconnect:\n";
+   foreach $Reason (sort {$a cmp $b} keys %DisconnectReceived) {
+      print "   $Reason\n";
+      foreach $Host (sort {$a cmp $b} keys %{$DisconnectReceived{$Reason}}) {
+         print "      $Host : $DisconnectReceived{$Reason}{$Host} Time(s)\n";
+      }
+   }
+}
+
 if ($#Scanned >= 0) {
    print "\nScanned from these:\n";
    foreach $ThisOne (sort SortIP @Scanned) {
@@ -218,7 +251,7 @@
 
 if (keys %RefusedConnections) {
    print "\nRefused incoming connections:\n";
-   foreach my $badguy ( keys %RefusedConnections ) {
+   foreach my $badguy (sort {$a cmp $b} keys %RefusedConnections ) {
       print "      $badguy: " . $RefusedConnections{$badguy} . " Time(s)\n";
    }
 }
