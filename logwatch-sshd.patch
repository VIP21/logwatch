Index: scripts/services/sshd
===================================================================
RCS file: /var/cvs/logwatch/scripts/services/sshd,v
retrieving revision 1.37
diff -u -r1.37 sshd
--- scripts/services/sshd	3 Feb 2004 19:13:14 -0000	1.37
+++ scripts/services/sshd	6 Apr 2004 06:20:10 -0000
@@ -72,7 +72,10 @@
        ($ThisLine =~ m/^fatal: Timeout before authentication/ ) or
        ($ThisLine =~ m/sshd startup\s+succeeded/) or
        ($ThisLine =~ m/sshd shutdown\s+succeeded/) or
-       ($ThisLine =~ m/Postponed keyboard-interactive for [^ ]+ from [^ ]+/)
+       ($ThisLine =~ m/Postponed keyboard-interactive for [^ ]+ from [^ ]+/) or
+       ($ThisLine =~ m/Disconnecting: Corrupted MAC on input./) or
+       ($ThisLine =~ m/Disconnecting: Corrupted check bytes on input./) or
+       ($ThisLine =~ m/^error: accept: Connection reset by peer$/)
    ) {
       # Ignore these
    } elsif ($ThisLine =~ /^Accepted (\S+) for (\S+) from ([\d\.:a-f]+) port (\d+)/) {
@@ -89,15 +92,15 @@
          print STDERR "DEBUG: Found -Failed login- line\n";
       }
       $BadLogins{"$2/$1 from $3"}++;
-   } elsif ( $ThisLine =~ m/^Failed (\S+) for illegal user (\S+) from ([^ ]+) port (\d+)/ ) { #openssh
+   } elsif ( $ThisLine =~ m/^Failed (\S+) for illegal user (.*) from ([^ ]+) port (\d+)/ ) { #openssh
       $Temp = "$2/$1 from $3";
       $BadLogins{$Temp}++;
       $IllegalUsers{$Temp}++;
    } elsif ( ($User) = ( $ThisLine =~ /Disconnecting: Too many authentication failures for ([^ ]+)/)) {
       $TooManyFailures{$User}++;
-   } elsif ( ($User) = ($ThisLine =~ /^input_userauth_request: illegal user ([^ ]+)$/ )) {
+   } elsif ( ($User) = ($ThisLine =~ /^input_userauth_request: illegal user (.*)$/ )) {
       $IllegalUsers{"$User/none from unknown"}++;
-   } elsif ( $ThisLine =~ m/^Illegal user (\S+) from ([^ ]+)/ ) { #redhat thing
+   } elsif ( $ThisLine =~ m/^Illegal user (.*) from ([^ ]+)/ ) { #redhat thing
       $IllegalUsers{"$1/none from $2"}++;
    } elsif ( $ThisLine =~ m/^(fatal: )?Did not receive ident(ification)? string from (.+)/ ) { # ssh/openssh
       $name = LookupIP($3);
@@ -151,6 +154,10 @@
       $NoRevMap{$ThisLine}++;
    } elsif ( ($Address) = ($ThisLine =~ /^reverse mapping checking getaddrinfo for ([^ ]*) failed - POSSIBLE BREAKIN ATTEMPT!/)) {
       $NoRevMap{$Address}++;
+   } elsif ( ($IP,$Address) = ($ThisLine =~ /^Address ([^ ]*) maps to ([^ ]*), but this does not map back to the address - POSSIBLE BREAKIN ATTEMPT!/)) {
+      $NoRevMap{"$Address($IP)"}++;
+   } elsif ( (undef,$Address) = ($ThisLine =~ /^warning: ([^ ]*), line \d+: can't verify hostname: getaddrinfo\(([^ ]*), AF_INET\) failed$/)) {
+      $NoRevMap{$Address}++;
    } elsif ( $ThisLine =~ m/subsystem request for sftp/ ) {
       $sftpRequests++;
    } elsif ( $ThisLine =~ m/refused connect from (.*)$/ ) {
@@ -169,6 +176,8 @@
       $TTYModesFail{$Reason}++;
    } elsif ( ($User,undef) = ($ThisLine =~ /^User ([^ ]*) not allowed because ([^ ]*) exists$/)) {
       $LoginLock{$User}++;
+   } elsif ( ($Method,$User,$Host) = ($ThisLine =~ /^Postponed ([^ ]*) for ([^ ]*|illegal user) from ([^ ]*) port \d+ ssh/)) {
+      $PostPonedAuth{"$User/$Method"}{$Host}++;
    } elsif ( ($IP) = ($ThisLine =~ /^scanned from ([^ ]*)/) ) {
       push @Scanned, LookupIP($IP);
    } else {
@@ -235,13 +244,6 @@
    }
 }
 
-if (keys %TooManyFailures) {
-   print "\nDisconnecting after too many authentication failures for user:\n";
-   foreach $User (sort {$a cmp $b} keys %TooManyFailures) {
-      print "   $User : $TooManyFailures{$User} Time(s)\n";
-   }
-}
-
 if (keys %BadLogins) {
    print "\nFailed logins from these:\n";
    for (sort keys %BadLogins) {
@@ -260,6 +262,16 @@
    print "\nUser login attempt when nologin was set:\n";
    foreach $User (sort {$a cmp $b} keys %LoginLock) {
       print "   $User : $LoginLock{$User} Time(s)\n";
+   }
+}
+
+if (keys %PostPonedAuth) {
+   print "\nPostponed authentication:\n";
+   foreach $User (sort {$a cmp $b} keys %PostPonedAuth) {
+      print "   $User:\n";
+      foreach $Host (sort {$a cmp $b} keys %{$PostPonedAuth{$User}}) {
+         print "      $Host: $PostPonedAuth{$User}{$Host} Time(s)\n";
+      }
    }
 }
 
