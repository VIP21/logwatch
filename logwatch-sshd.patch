Index: scripts/services/sshd
===================================================================
RCS file: /var/cvs/logwatch/scripts/services/sshd,v
retrieving revision 1.39
diff -u -r1.39 sshd
--- scripts/services/sshd	29 Oct 2004 21:19:01 -0000	1.39
+++ scripts/services/sshd	14 Dec 2004 09:16:31 -0000
@@ -1,4 +1,3 @@
-
 ##########################################################################
 # $Id$
 ##########################################################################
@@ -106,16 +105,16 @@
          print STDERR "DEBUG: Found -Failed login- line\n";
       }
       $BadLogins{"$2/$1 from $3"}++;
-   } elsif ( $ThisLine =~ m/^Failed (\S+) for illegal user (.*) from ([^ ]+) port (\d+)/ ) { #openssh
-      $Temp = "$2/$1 from $3";
+   } elsif ( ($Method, undef,$User,$Host,$Port) = ($ThisLine =~ m/^Failed (\S+) for (illegal|invalid) user (.*) from ([^ ]+) port (\d+)/ ) ) { #openssh
+      $Temp = "$User/$Method from $Host";
       $BadLogins{$Temp}++;
       $IllegalUsers{$Temp}++;
    } elsif ( ($User) = ( $ThisLine =~ /Disconnecting: Too many authentication failures for ([^ ]+)/)) {
       $TooManyFailures{$User}++;
-   } elsif ( ($User) = ($ThisLine =~ /^input_userauth_request: illegal user (.*)$/ )) {
+   } elsif ( (undef,$User) = ($ThisLine =~ /^input_userauth_request: (illegal|invalid) user (.*)$/ )) {
       $IllegalUsers{"$User/none from unknown"}++;
-   } elsif ( $ThisLine =~ m/^Illegal user (.*) from ([^ ]+)/ ) { #redhat thing
-      $IllegalUsers{"$1/none from $2"}++;
+   } elsif ( (undef,$User,$Host) =($ThisLine =~ m/^(Illegal|Invalid) user (.*) from ([^ ]+)/ ) ) { #redhat thing
+      $IllegalUsers{"$User/none from $Host"}++;
    } elsif ( $ThisLine =~ m/^(fatal: )?Did not receive ident(ification)? string from (.+)/ ) { # ssh/openssh
       $name = LookupIP($3);
       $NoIdent{$name}++;
@@ -190,11 +189,13 @@
       $TTYModesFail{$Reason}++;
    } elsif ( ($User,undef) = ($ThisLine =~ /^User ([^ ]*) not allowed because ([^ ]*) exists$/)) {
       $LoginLock{$User}++;
-   } elsif ( ($Method,$User,$Host) = ($ThisLine =~ /^Postponed ([^ ]*) for (illegal user [^ ]*|[^ ]*) from ([^ ]*) port \d+ ssh/)) {
+   } elsif ( ($Method,$User,$Host) = ($ThisLine =~ /^Postponed ([^ ]*) for (invalid user [^ ]*|illegal user [^ ]*|[^ ]*) from ([^ ]*) port \d+ ssh/)) {
       $PostPonedAuth{"$User/$Method"}{$Host}++;
       $IllegalUsers{"$User/$Method"}++;
    } elsif ( ($User) = ($ThisLine =~ /^User ([^ ]*) not allowed because account is locked/)) {
       $LockedAccount{$User}++;
+   } elsif ( ($Line,$Option) = ($ThisLine =~ /^rexec line (\d+): Deprecated option (.*)$/)) {
+      $DeprecatedOption{"$Option - line $Line"}++;
    } elsif ( ($IP) = ($ThisLine =~ /^scanned from ([^ ]*)/) ) {
       push @Scanned, LookupIP($IP);
    } else {
@@ -217,6 +218,13 @@
    print "\nSSHD Started: " . $Starts . " Time(s)\n";
 }
 
+if (keys %DeprecatedOption) {
+   print "\nDeprecated options in SSH config:\n";
+   foreach $Option (sort {$a cmp $b} keys %DeprecatedOption) {
+      print "   $Option\n";
+   }
+}
+
 if (keys %RootLogin) {
    print "\n\nWARNING!!!\n";
    print "Refused ROOT login attempt from:\n";
@@ -386,4 +394,4 @@
 
 exit(0);
 
-# vi: shiftwidth=3 tabstop=3 et
+# vi: shiftwidth=3 tabstop=3 syntax=perl et
