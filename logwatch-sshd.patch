Index: scripts/services/sshd
===================================================================
RCS file: /var/cvs/logwatch/scripts/services/sshd,v
retrieving revision 1.35
diff -u -r1.35 sshd
--- scripts/services/sshd	3 Feb 2004 03:52:20 -0000	1.35
+++ scripts/services/sshd	3 Feb 2004 07:27:44 -0000
@@ -58,13 +58,14 @@
        ($ThisLine =~ m/^(log: )?Starting sshd:/ ) or
        ($ThisLine =~ m/^(log: )?sshd \-TERM succeeded/ ) or
        ($ThisLine =~ m/^Disconnecting: Command terminated on signal \d+/) or
-       ($ThisLine =~ m/Bad protocol version identification .*:? [\d.]+/ ) or
+       ($ThisLine =~ m/^Bad protocol version identification .*:? [\d.]+/ ) or
+       ($ThisLine =~ m/^Bad protocol version identification.*Big-Brother-Monitor/ ) or
        ($ThisLine =~ m/^connect from \d+\.\d+\.\d+\.\d+/) or
        ($ThisLine =~ m/Read from socket failed/) or
-       ($ThisLine =~ m/^Bad protocol version identification.*Big-Brother-Monitor/ ) or
        ($ThisLine =~ m/^fatal: Timeout before authentication/ ) or
        ($ThisLine =~ m/sshd startup\s+succeeded/) or
-       ($ThisLine =~ m/sshd shutdown\s+succeeded/)
+       ($ThisLine =~ m/sshd shutdown\s+succeeded/) or
+       ($ThisLine =~ m/Postponed keyboard-interactive for [^ ]+ from [^ ]+/)
    ) {
       # Ignore these
    } elsif ($ThisLine =~ /^Accepted (\S+) for (\S+) from ([\d\.:a-f]+) port (\d+)/) {
@@ -94,15 +95,17 @@
    } elsif ( $ThisLine =~ m/^(fatal: )?Did not receive ident(ification)? string from (.+)/ ) { # ssh/openssh
       $name = LookupIP($3);
       $NoIdent{$name}++;
-   } elsif ( $ThisLine =~ m/^fatal: Connection closed by remote host\./ ) {
-      $NetworkErrors++;
-   } elsif ( $ThisLine =~ m/^fatal: Read error from remote host: Connection reset by peer/ ) {
-      $NetworkErrors++;
-   } elsif ( $ThisLine =~ m/^fatal: Write failed: Network is unreachable/ ) {
-      $NetworkErrors++;
-   } elsif ($ThisLine =~ m/^fatal: Read from socket failed: No route to host/) {
-      $NetworkErrors++;
-   } elsif ($ThisLine =~ m/^error: chan_shutdown_read failed for .+/) {
+   } elsif ( ($Host) = ($ThisLine =~ /Could not write ident string to ([^ ]+)$/ )) {
+      $name = LookupIP($Host);
+      $NoIdent{$name}++;
+   } elsif (
+      ($ThisLine =~ m/^fatal: Connection closed by remote host\./ ) or
+      ($ThisLine =~ m/^fatal: Read error from remote host: Connection reset by peer/ ) or
+      ($ThisLine =~ m/^fatal: Read from socket failed: No route to host/) or 
+      ($ThisLine =~ m/^fatal: Write failed: Network is unreachable/ ) or 
+      ($ThisLine =~ m/^fatal: Write failed: Broken pipe/) or
+      ($ThisLine =~ m/^error: chan_shutdown_read failed for .+/)
+   ) {
       $NetworkErrors++;
    } elsif ( $ThisLine =~ m/^(log: )?Received (signal 15|SIG...); (terminating|restarting)\./) { #ssh/openssh
       $Kills++;
@@ -155,6 +158,10 @@
       $PamReleaseFail{$Error}++;
    } elsif ( $ThisLine =~ m/^error: PAM: (.*)$/) {
       $PamReleaseFail{$Error}++;
+   } elsif ( ($Reason) = ($ThisLine =~ /^Setting tty modes failed: (.*)$/)) {
+      $TTYModesFail{$Reason}++;
+   } elsif ( ($User,undef) = ($ThisLine =~ /^User ([^ ]*) not allowed because ([^ ]*) exists$/)) {
+      $LoginLock{$User}++;
    } elsif ( ($IP) = ($ThisLine =~ /^scanned from ([^ ]*)/) ) {
       push @Scanned, LookupIP($IP);
    } else {
@@ -165,6 +172,9 @@
    }
 }
 
+
+###########################################################
+#
 if ($NetworkErrors) {
    print "\nNetwork Read Write Errors: " . $NetworkErrors . "\n";
 }
@@ -194,13 +204,13 @@
    if (keys %NoRevMap) {
       print "\nCouldn't resolve these IPs:\n";
       foreach $ThisOne (sort {$a cmp $b} keys %NoRevMap) {
-         print "   " . $ThisOne . ": " . $NoRevMap{$ThisOne} . " Time(s)\n";
+         print "   $ThisOne: $NoRevMap{$ThisOne} Time(s)\n";
       }
    }
    if (keys %NoIdent) {
       print "\nDidn't receive an ident from these IPs:\n";
       foreach $ThisOne (sort {$a cmp $b} keys %NoIdent) {
-         print "   " . $ThisOne . ": " . $NoIdent{$ThisOne} . " Time(s)\n";
+         print "   $ThisOne: $NoIdent{$ThisOne} Time(s)\n";
       }
    }
 }
@@ -208,7 +218,14 @@
 if ($#BadRSA >= 0) {
    print "\nReceived a bad response to RSA challenge from these:\n";
    foreach $ThisOne (@BadRSA) {
-      print "   " . $ThisOne . "\n";
+      print "   $ThisOne\n";
+   }
+}
+
+if (keys %TooManyFailures) {
+   print "\nDisconnecting after too many authentication failures for user:\n";
+   foreach $User (sort {$a cmp $b} keys %TooManyFailures) {
+      print "   $User : $TooManyFailures{$User} Time(s)\n";
    }
 }
 
@@ -233,6 +250,13 @@
    }
 }
 
+if ((keys %LoginLock) and ($Detail >= 5)) {
+   print "\nUser login attempt when nologin was set:\n";
+   foreach $User (sort {$a cmp $b} keys %LoginLock) {
+      print "   $User : $LoginLock{$User} Time(s)\n";
+   }
+}
+
 if (keys %Users) {
    print "\nUsers logging in through sshd:\n";
    foreach $user (sort {$a cmp $b} keys %Users) {
@@ -292,6 +316,13 @@
    print "\nCannot release PAM authentication:\n";
    foreach $Error (sort {$a cmp $b} keys %PamReleaseFail) {
       print "   $Error : $PamReleaseFail{$Error} Time(s)\n";
+   }
+}
+
+if (keys %TTYModesFail) {
+   print "\nSetting tty modes failed:\n";
+   foreach $Reason (sort {$a cmp $b} keys %TTYModesFail) {
+      print "   $Reason : $TTYModesFail{$Reason} Time(s)\n";
    }
 }
 
