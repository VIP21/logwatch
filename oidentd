#!/usr/bin/perl -w
##########################################################################
# $Id$
##########################################################################
# $Log$
# Revision 1.1  2004/01/23 20:47:20  blues
# - basic support for oidentd. It's full support for me, but I know that
#   something is missing. If you have some unmatched entries - send to me.
#
##########################################################################

########################################################
# This was written and is maintained by:
#    Pawe³ Go³aszewski <blues@pld-linux.org>
#
# Please send all comments, suggestions, bug reports,
#    etc, to kirk@kaybee.org and blues@pld-linux.org
########################################################

## Initial initialization:
$Startups = 0;
$Shutdowns = 0;
$LookupCount = 0;
$LookupErrorCount = 0;
$Connections = 0;

while (defined($ThisLine = <STDIN>)) {
   chomp($ThisLine);
   if (
      ($ThisLine =~ m/^Continuous traffic control enabled/) or
      ($ThisLine =~ m/^Timeout for request -- Closing connection/)
   ) {
      #ignore these
   } elsif ( ($Host,$Port,$User,$Identity) = ($ThisLine =~ /^\[([^ ]*)\] Successful lookup: \d+ , (\d+) : ([^ ]*) \(([^ ]*)\)$/)) {
      $Temp = "$User announced as $Identity";
      $Lookups{$Port}{$Temp}{$Host}++;
      $LookupCount++;
   } elsif ( 
      (($Host) = ($ThisLine =~ /^Connection from ([^ ]* \([^ ]*\)):\d+$/)) or
      (($Host) = ($ThisLine =~ /^Connection from ([^ ]*):\d+$/))
      ) {
      $Connection{$Host}++;
      $Connections++;
   } elsif ( ($Host,$Port) = ($ThisLine =~ /^\[([^ ]*)\] \d+ , (\d+) : ERROR : [^ ]*$/)) {
      $ErrorLookup{$Port}{$Host}++;
      $LookupErrorCount++;
   } elsif ( $ThisLine =~ /^oidentd startup\s+succeeded$/ ) {
      $Startups++;
   } elsif ( $ThisLine =~ /^oidentd shutdown\s+succeeded$/ ) {
      $Shutdowns++;
   } else {
      $OtherList{$ThisLine}++;
   }
}

###########################
# Print report:

if ($Startups > 0) {
   print "\nStartups: $Startups\n";
}

if ($Shutdowns > 0) {
   print "\nShutdowns: $Shutdowns\n";
}

if (keys %Connection) {
   print "\nConnections to service: $Connections Time(s)\n";
   foreach $Host (sort {$a cmp $b} keys %Connection) {
      print "   $Host: $Connection{$Host} Time(s)\n";
   }
}

if (keys %Lookups) {
   print "\nSuccessful ident lookups $LookupCount Time(s)\n";
   foreach $Port (sort {$a cmp $b} keys %Lookups) {
      print "    Service on port $Port:\n";
      foreach $User (sort {$a cmp $b} keys %{$Lookups{$Port}}) {
         print "      $User:\n";
         foreach $Host (sort {$a cmp $b} keys %{$Lookups{$Port}{$User}}) {
            print "         $Host: $Lookups{$Port}{$User}{$Host} Time(s)\n";
         }
      }
   }
}

if (keys %ErrorLookup) {
   print "\nErrors when lookup ident $LookupErrorCount Time(s)\n";
   foreach $Port (sort {$a cmp $b} keys %ErrorLookup) {
      print "    Service on port $Port:\n";
      foreach $Host (sort {$a cmp $b} keys %{$ErrorLookup{$Port}}) {
         print "      $Host: $ErrorLookup{$Port}{$Host} Time(s)\n"
      }
   }
}

if (keys %OtherList) {
   print "\n**Unmatched Entries**\n";
   foreach $line (sort {$a cmp $b} keys %OtherList) {
      print "$line: $OtherList{$line} Time(s)\n";
   }
}

exit(0);

# vi: shiftwidth=3 tabstop=3 et

