Index: scripts/services/cisco
===================================================================
RCS file: /var/cvs/logwatch/scripts/services/cisco,v
retrieving revision 1.2
diff -u -r1.2 cisco
--- scripts/services/cisco	21 Jun 2004 15:07:21 -0000	1.2
+++ scripts/services/cisco	1 Oct 2004 17:57:12 -0000
@@ -1,6 +1,6 @@
 #!/usr/bin/perl -w
 ##########################################################################
-# $Id$
+# $Id$
 ##########################################################################
 
 ########################################################
@@ -15,11 +15,29 @@
 
 use Logwatch ':all';
 
-$Detail = $ENV{'LOGWATCH_DETAIL_LEVEL'} || 0;
+$Debug = ValueOrDefault($ENV{'LOGWATCH_DEBUG'}, 0);
+$Detail = ValueOrDefault($ENV{'LOGWATCH_DETAIL_LEVEL'}, 0);
+
+# Avoid "Use of uninitialized value" warning messages.
+sub ValueOrDefault {
+    my ($value, $default) = @_;
+    return ($value ? $value : $default);
+}
+
+if ( $Debug >= 5 ) {
+    print STDERR "\n\nDEBUG: Inside CISCO Filter \n\n";
+    $DebugCounter = 1;
+}
+
+
 
 my ($month,$day,$time,$host,$process,$conn,$msg);
 
 while (defined($ThisLine = <STDIN>)) {
+    if ( $Debug >= 30 ) {
+        print STDERR "DEBUG($DebugCounter): $ThisLine";
+        $DebugCounter++;
+    }
 
 ($month,$day,$time,$host,$process,$conn,$msg)=split(/ +/,$ThisLine,7);
 
@@ -27,6 +45,7 @@
          ($ThisLine =~ /Copyright/ ) or 
          ($ThisLine =~ /Cisco Internetwork Operating System Software/ ) or 
          ($ThisLine =~ /IOS \(tm\)/ ) or 
+         ($ThisLine =~ /TAC:Home:SW:IOS:Specials/ ) or 
          ($ThisLine =~ /accept udp/ ) or
          ($ThisLine =~ /accept tcp/ ) or
          ($ThisLine =~ /accept icmp/ ) or
@@ -59,6 +78,9 @@
    elsif ( ($interface) = ($ThisLine =~ /DUPLEXMISMATCH:Full\/half duplex mismatch detected on port (.*)/) ) {
       $DuplexMismatched{$host}{$interface}++;
    }
+   elsif ( ($interface) = ($ThisLine =~ /ETHCNTR-3-HALF_DUX_COLLISION_EXCEED_THRESHOLD: (.*)/) ) {
+      $DuplexMismatched{$host}{$interface}++;
+   }
    elsif ( ($interface,$state,$destination_port) = ($ThisLine =~ /PORTFROMSTP:Port (.+) (.+) bridge port (.*)/) ) {
       $PortStateBridge{$host}{$interface," ",$state," ",$destination_port}++;
    }
@@ -101,6 +123,9 @@
    elsif ( ($interface) = ($ThisLine =~ /P2_WARN: (.*)/) ) {
       $InvalidMulticast{$host}{$interface}++;
    }
+   elsif ( ($device,$vty,$interface) = ($ThisLine =~ /Configured from (\S+) by (\S+) \((.+)\)/) ) {
+      $Configured{$host}{"Configured from $device by $vty ",LookupIP($interface)}++;
+   }
    elsif ( ($interface) = ($ThisLine =~ /CONFIG.+: (.*)/) ) {
       $Configured{$host}{$interface}++;
    }
@@ -125,6 +150,90 @@
    elsif ( ($interface) = ($ThisLine =~ /DHCPD-4-DECLINE_CONFLICT: (.*)/) ) {
       $DHCPConflict{$host}{$interface}++;
    }
+   elsif ( ($interface) = ($ThisLine =~ /DHCPD-4-PING_CONFLICT: (.*)/) ) {
+      $DHCPPingConflict{$host}{$interface}++;
+   }
+   elsif ( ($interface) = ($ThisLine =~ /AAAA-4-SERVUNDEF: (.*)/) ) {
+      $AAAServerUndef{$host}{$interface}++;
+   }
+   elsif ( ($interface) = ($ThisLine =~ /AAAA-3-BADREG: (.*)/) ) {
+      $AAABadReg{$host}{$interface}++;
+   }
+   elsif ( ($interface) = ($ThisLine =~ /MGMT-5-NVRAM_MINDOWN: (.*)/) ) {
+      $MgmtResetMindown{$host}{$interface}++;
+   }
+   elsif ( ($interface) = ($ThisLine =~ /RUNCFGSYNC-6-SYNCEVENT: (.*)/) ) {
+      $RUNCFGEnabled{$host}{$interface}++;
+   }
+   elsif ( ($interface) = ($ThisLine =~ /RSP-3-SLAVECHANGE: (.*)/) ) {
+      $RSPSlaveChange{$host}{$interface}++;
+   }
+   elsif ( ($interface) = ($ThisLine =~ /RSP-3-SLAVEUP: (.*)/) ) {
+      $RSPSlaveUp{$host}{$interface}++;
+   }
+   elsif ( ($interface) = ($ThisLine =~ /RSP-3-SLAVEDOWN: (.*)/) ) {
+      $RSPSlaveDown{$host}{$interface}++;
+   }
+   elsif ( ($interface) = ($ThisLine =~ /MLS-5-MLSENABLED: (.*)/) ) {
+      $MLSMultiLayerEnabled{$host}{$interface}++;
+   }
+   elsif ( ($interface) = ($ThisLine =~ /MLS-5-MLSDISABLED: (.*)/) ) {
+      $MLSMultiLayerDisabled{$host}{$interface}++;
+   }
+   elsif ( ($interface) = ($ThisLine =~ /MLS-5-MCAST_STATUS: (.*)/) ) {
+      $MLSMcastStatus{$host}{$interface}++;
+   }
+   elsif ( ($interface) = ($ThisLine =~ /MLS-5-NDEENABLED: (.*)/) ) {
+      $MLSNetflowEnabled{$host}{$interface}++;
+   }
+   elsif ( ($interface) = ($ThisLine =~ /MLS-5-NDEDISABLED: (.*)/) ) {
+      $MLSNetflowDisabled{$host}{$interface}++;
+   }
+   elsif ( ($interface) = ($ThisLine =~ /MLS-5-FLOWMASKCHANGE: (.*)/) ) {
+      $MLSFlowmaskChanged{$host}{$interface}++;
+   }
+   elsif ( ($interface) = ($ThisLine =~ /SYS-4-P2_WARN: (.*)/) ) {
+      $SYSWarn{$host}{$interface}++;
+   }
+   elsif ( ($interface) = ($ThisLine =~ /SYS-3-CPUHOG: (.*)/) ) {
+      $SYSCpuHog{$host}{$interface}++;
+   }
+   elsif ( ($interface) = ($ThisLine =~ /SYS-5-MOD_PWRON:Module (.+) (.*)/) ) {
+      $SYSModulePowerOn{$host}{$interface}++;
+   }
+   elsif ( ($interface) = ($ThisLine =~ /SYS-1-SYS_ENABLEPS: (.*)/) ) {
+      $SYSModulePowerSupplyUp{$host}{$interface}++;
+   }
+   elsif ( ($interface) = ($ThisLine =~ /SYS-5-MOD_OK:Module (.+) (.*)/) ) {
+      $SYSModuleOk{$host}{$interface}++;
+   }
+   elsif ( ($interface) = ($ThisLine =~ /SYS-5-MOD_INSERT:Module (.+) (.*)/) ) {
+      $SYSModuleInserted{$host}{$interface}++;
+   }
+   elsif ( ($interface) = ($ThisLine =~ /SYS-3-MOD_MINORFAIL:Module (.+) (.*)/) ) {
+      $SYSModuleMinorFail{$host}{$interface}++;
+   }
+   elsif ( ($interface) = ($ThisLine =~ /SYS-5-MOD_RESET:Module (.+) (.*)/) ) {
+      $SYSModuleReset{$host}{$interface}++;
+   }
+   elsif ( ($interface) = ($ThisLine =~ /SYS-5-SUP_MODSBY: (.*)/) ) {
+      $SYSModuleStandby{$host}{$interface}++;
+   }
+   elsif ( ($interface) = ($ThisLine =~ /SYS-3-SUP_WAITSBYSUPONLINE: (.*)/) ) {
+      $SYSWaitOnline{$host}{$interface}++;
+   }
+   elsif ( ($interface) = ($ThisLine =~ /SYS-3-SUP_THISSUPRESET: (.*)/) ) {
+      $SYSSupervisorEngineReset{$host}{$interface}++;
+   }
+   elsif ( ($interface) = ($ThisLine =~ /SYS-5-SUP_IMGSYNCSTART: (.*)/) ) {
+      $SYSImgSyncStart{$host}{$interface}++;
+   }
+   elsif ( ($interface) = ($ThisLine =~ /SYS-5-SUP_IMGSYNCFINISH: (.*)/) ) {
+      $SYSImgSyncFinished{$host}{$interface}++;
+   }
+   elsif ( ($interface) = ($ThisLine =~ /SNMP-5-COLDSTART: (.*)/) ) {
+      $SNMPColdStart{$host}{$interface}++;
+   }
    elsif ( ($interface) = ($ThisLine =~ /COUNTERS: (.*)/) ) {
       $CountersMsg{$host}{$interface}++;
    }
@@ -392,6 +501,289 @@
 }
 
 
+if (keys %DHCPPingConflict) {
+   print "\nDHCP Address Conflict on device :\n";
+   foreach $ThisOne (keys %DHCPPingConflict) {
+      print "   " . $ThisOne . ":\n";
+      foreach $ThatOne (keys %{$DHCPPingConflict{$ThisOne}}) {
+         print "\t " .$ThatOne . "\t: " . $DHCPPingConflict{$ThisOne}{$ThatOne} . " Time(s)\n";
+      }
+   }
+}
+
+if (keys %AAAServerUndef) {
+   print "\nAAA Server Undefined on device :\n";
+   foreach $ThisOne (keys %AAAServerUndef) {
+      print "   " . $ThisOne . ":\n";
+      foreach $ThatOne (keys %{$AAAServerUndef{$ThisOne}}) {
+         print "\t " .$ThatOne . "\t: " . $AAAServerUndef{$ThisOne}{$ThatOne} . " Time(s)\n";
+      }
+   }
+}
+
+if (keys %AAABadReg) {
+   print "\nAAA Bad Register on device :\n";
+   foreach $ThisOne (keys %AAABadReg) {
+      print "   " . $ThisOne . ":\n";
+      foreach $ThatOne (keys %{$AAABadReg{$ThisOne}}) {
+         print "\t " .$ThatOne . "\t: " . $AAABadReg{$ThisOne}{$ThatOne} . " Time(s)\n";
+      }
+   }
+}
+
+if (keys %RUNCFGEnabled) {
+   print "\nHigh-Availability Redundancy Feature is enabled on device :\n";
+   foreach $ThisOne (keys %RUNCFGEnabled) {
+      print "   " . $ThisOne . ":\n";
+      foreach $ThatOne (keys %{$RUNCFGEnabled{$ThisOne}}) {
+         print "\t " .$ThatOne . "\t: " . $RUNCFGEnabled{$ThisOne}{$ThatOne} . " Time(s)\n";
+      }
+   }
+}
+
+if (keys %RSPSlaveUp) {
+   print "\nHigh-Availability Redundancy Feature, Card is manually reset, Slave is up  on device :\n";
+   foreach $ThisOne (keys %RSPSlaveUp) {
+      print "   " . $ThisOne . ":\n";
+      foreach $ThatOne (keys %{$RSPSlaveUp{$ThisOne}}) {
+         print "\t " .$ThatOne . "\t: " . $RSPSlaveUp{$ThisOne}{$ThatOne} . " Time(s)\n";
+      }
+   }
+}
+
+if (keys %RSPSlaveDown) {
+   print "\nHigh-Availability Redundancy Feature, Card is manually reset, Slave is down  on device :\n";
+   foreach $ThisOne (keys %RSPSlaveDown) {
+      print "   " . $ThisOne . ":\n";
+      foreach $ThatOne (keys %{$RSPSlaveDown{$ThisOne}}) {
+         print "\t " .$ThatOne . "\t: " . $RSPSlaveDown{$ThisOne}{$ThatOne} . " Time(s)\n";
+      }
+   }
+}
+
+if (keys %RSPSlaveChange) {
+   print "\nHigh-Availability Redundancy Feature, Card is manually reset, Slave is changinf state on device :\n";
+   foreach $ThisOne (keys %RSPSlaveChange) {
+      print "   " . $ThisOne . ":\n";
+      foreach $ThatOne (keys %{$RSPSlaveChange{$ThisOne}}) {
+         print "\t " .$ThatOne . "\t: " . $RSPSlaveChange{$ThisOne}{$ThatOne} . " Time(s)\n";
+      }
+   }
+}
+
+if (keys %MLSFlowmaskChanged) {
+   print "\nFlow Mask Changed on device :\n";
+   foreach $ThisOne (keys %MLSFlowmaskChanged) {
+      print "   " . $ThisOne . ":\n";
+      foreach $ThatOne (keys %{$MLSFlowmaskChanged{$ThisOne}}) {
+         print "\t " .$ThatOne . "\t: " . $MLSFlowmaskChanged{$ThisOne}{$ThatOne} . " Time(s)\n";
+      }
+   }
+}
+
+if (keys %MLSMcastStatus) {
+   print "\nIP Multicast status on device :\n";
+   foreach $ThisOne (keys %MLSMcastStatus) {
+      print "   " . $ThisOne . ":\n";
+      foreach $ThatOne (keys %{$MLSMcastStatus{$ThisOne}}) {
+         print "\t " .$ThatOne . "\t: " . $MLSMcastStatus{$ThisOne}{$ThatOne} . " Time(s)\n";
+      }
+   }
+}
+
+
+
+if (keys %MLSMultiLayerEnabled) {
+   print "\nIP Multilayer switching enabled on device :\n";
+   foreach $ThisOne (keys %MLSMultiLayerEnabled) {
+      print "   " . $ThisOne . ":\n";
+      foreach $ThatOne (keys %{$MLSMultiLayerEnabled{$ThisOne}}) {
+         print "\t " .$ThatOne . "\t: " . $MLSMultiLayerEnabled{$ThisOne}{$ThatOne} . " Time(s)\n";
+      }
+   }
+}
+
+if (keys %MLSMultiLayerDisabled) {
+   print "\nIP Multilayer switching disabled on device :\n";
+   foreach $ThisOne (keys %MLSMultiLayerDisabled) {
+      print "   " . $ThisOne . ":\n";
+      foreach $ThatOne (keys %{$MLSMultiLayerDisabled{$ThisOne}}) {
+         print "\t " .$ThatOne . "\t: " . $MLSMultiLayerDisabled{$ThisOne}{$ThatOne} . " Time(s)\n";
+      }
+   }
+}
+
+if (keys %MLSNetflowEnabled) {
+   print "\nNetflow enabled on device :\n";
+   foreach $ThisOne (keys %MLSNetflowEnabled) {
+      print "   " . $ThisOne . ":\n";
+      foreach $ThatOne (keys %{$MLSNetflowEnabled{$ThisOne}}) {
+         print "\t " .$ThatOne . "\t: " . $MLSNetflowEnabled{$ThisOne}{$ThatOne} . " Time(s)\n";
+      }
+   }
+}
+
+if (keys %MLSNetflowDisabled) {
+   print "\nNetflow disabled on device :\n";
+   foreach $ThisOne (keys %MLSNetflowDisabled) {
+      print "   " . $ThisOne . ":\n";
+      foreach $ThatOne (keys %{$MLSNetflowDisabled{$ThisOne}}) {
+         print "\t " .$ThatOne . "\t: " . $MLSNetflowDisabled{$ThisOne}{$ThatOne} . " Time(s)\n";
+      }
+   }
+}
+
+if (keys %MgmtResetMindown) {
+   print "\nReset mindown on device :\n";
+   foreach $ThisOne (keys %MgmtResetMindown) {
+      print "   " . $ThisOne . ":\n";
+      foreach $ThatOne (keys %{$MgmtResetMindown{$ThisOne}}) {
+         print "\t " .$ThatOne . "\t: " . $MgmtResetMindown{$ThisOne}{$ThatOne} . " Time(s)\n";
+      }
+   }
+}
+
+if (keys %SYSWarn) {
+   print "\nModule timeout on device :\n";
+   foreach $ThisOne (keys %SYSWarn) {
+      print "   " . $ThisOne . ":\n";
+      foreach $ThatOne (keys %{$SYSWarn{$ThisOne}}) {
+         print "\t " .$ThatOne . "\t: " . $SYSWarn{$ThisOne}{$ThatOne} . " Time(s)\n";
+      }
+   }
+}
+
+if (keys %SYSCpuHog) {
+   print "\nCpu Hog on device :\n";
+   foreach $ThisOne (keys %SYSCpuHog) {
+      print "   " . $ThisOne . ":\n";
+      foreach $ThatOne (keys %{$SYSCpuHog{$ThisOne}}) {
+         print "\t " .$ThatOne . "\t: " . $SYSCpuHog{$ThisOne}{$ThatOne} . " Time(s)\n";
+      }
+   }
+}
+
+if (keys %SYSModulePowerSupplyUp) {
+   print "\nModule power supply up on device :\n";
+   foreach $ThisOne (keys %SYSModulePowerSupplyUp) {
+      print "   " . $ThisOne . ":\n";
+      foreach $ThatOne (keys %{$SYSModulePowerSupplyUp{$ThisOne}}) {
+         print "\t " .$ThatOne . "\t: " . $SYSModulePowerSupplyUp{$ThisOne}{$ThatOne} . " Time(s)\n";
+      }
+   }
+}
+
+if (keys %SYSModulePowerOn) {
+   print "\nModule power up on device :\n";
+   foreach $ThisOne (keys %SYSModulePowerOn) {
+      print "   " . $ThisOne . ":\n";
+      foreach $ThatOne (keys %{$SYSModulePowerOn{$ThisOne}}) {
+         print "\t " .$ThatOne . "\t: " . $SYSModulePowerOn{$ThisOne}{$ThatOne} . " Time(s)\n";
+      }
+   }
+}
+
+if (keys %SYSModuleOk) {
+   print "\nModule online on device :\n";
+   foreach $ThisOne (keys %SYSModuleOk) {
+      print "   " . $ThisOne . ":\n";
+      foreach $ThatOne (keys %{$SYSModuleOk{$ThisOne}}) {
+         print "\t Module " .$ThatOne . "\t: " . $SYSModuleOk{$ThisOne}{$ThatOne} . " Time(s)\n";
+      }
+   }
+}
+
+if (keys %SYSModuleInserted) {
+   print "\nModule inserted on device :\n";
+   foreach $ThisOne (keys %SYSModuleInserted) {
+      print "   " . $ThisOne . ":\n";
+      foreach $ThatOne (keys %{$SYSModuleInserted{$ThisOne}}) {
+         print "\t Module " .$ThatOne . "\t: " . $SYSModuleInserted{$ThisOne}{$ThatOne} . " Time(s)\n";
+      }
+   }
+}
+
+if (keys %SYSModuleMinorFail) {
+   print "\nModule minor failure on device :\n";
+   foreach $ThisOne (keys %SYSModuleMinorFail) {
+      print "   " . $ThisOne . ":\n";
+      foreach $ThatOne (keys %{$SYSModuleMinorFail{$ThisOne}}) {
+         print "\t Module " .$ThatOne . "\t: " . $SYSModuleMinorFail{$ThisOne}{$ThatOne} . " Time(s)\n";
+      }
+   }
+}
+
+if (keys %SYSModuleReset) {
+   print "\nModule reset on device :\n";
+   foreach $ThisOne (keys %SYSModuleReset) {
+      print "   " . $ThisOne . ":\n";
+      foreach $ThatOne (keys %{$SYSModuleReset{$ThisOne}}) {
+         print "\t Module " .$ThatOne . "\t: " . $SYSModuleReset{$ThisOne}{$ThatOne} . " Time(s)\n";
+      }
+   }
+}
+
+if (keys %SYSWaitOnline) {
+   print "\nSupervisor engine in the process on beeing online on device :\n";
+   foreach $ThisOne (keys %SYSWaitOnline) {
+      print "   " . $ThisOne . ":\n";
+      foreach $ThatOne (keys %{$SYSWaitOnline{$ThisOne}}) {
+         print "\t " .$ThatOne . "\t: " . $SYSWaitOnline{$ThisOne}{$ThatOne} . " Time(s)\n";
+      }
+   }
+}
+
+
+if (keys %SYSModuleStandby) {
+   print "\nModule standby on device :\n";
+   foreach $ThisOne (keys %SYSModuleStandby) {
+      print "   " . $ThisOne . ":\n";
+      foreach $ThatOne (keys %{$SYSModuleStandby{$ThisOne}}) {
+         print "\t " .$ThatOne . "\t: " . $SYSModuleStandby{$ThisOne}{$ThatOne} . " Time(s)\n";
+      }
+   }
+}
+
+if (keys %SYSSupervisorEngineReset) {
+   print "\nSupervisor engine reset on device :\n";
+   foreach $ThisOne (keys %SYSSupervisorEngineReset) {
+      print "   " . $ThisOne . ":\n";
+      foreach $ThatOne (keys %{$SYSSupervisorEngineReset{$ThisOne}}) {
+         print "\t " .$ThatOne . "\t: " . $SYSSupervisorEngineReset{$ThisOne}{$ThatOne} . " Time(s)\n";
+      }
+   }
+}
+
+if (keys %SYSImgSyncStart) {
+   print "\nSwitch of supervisor engine started :\n";
+   foreach $ThisOne (keys %SYSImgSyncStart) {
+      print "   " . $ThisOne . ":\n";
+      foreach $ThatOne (keys %{$SYSImgSyncStart{$ThisOne}}) {
+         print "\t " .$ThatOne . "\t: " . $SYSImgSyncStart{$ThisOne}{$ThatOne} . " Time(s)\n";
+      }
+   }
+}
+
+if (keys %SYSImgSyncFinished) {
+   print "\nSwitch of supervisor engine finished :\n";
+   foreach $ThisOne (keys %SYSImgSyncFinished) {
+      print "   " . $ThisOne . ":\n";
+      foreach $ThatOne (keys %{$SYSImgSyncFinished{$ThisOne}}) {
+         print "\t " .$ThatOne . "\t: " . $SYSImgSyncFinished{$ThisOne}{$ThatOne} . " Time(s)\n";
+      }
+   }
+}
+
+if (keys %SNMPColdStart) {
+   print "\nSNMP Cold (Re)start on device :\n";
+   foreach $ThisOne (keys %SNMPColdStart) {
+      print "   " . $ThisOne . ":\n";
+      foreach $ThatOne (keys %{$SNMPColdStart{$ThisOne}}) {
+         print "\t " .$ThatOne . "\t: " . $SNMPColdStart{$ThisOne}{$ThatOne} . " Time(s)\n";
+      }
+   }
+}
+
 if ($#OtherList >= 0) {
    print "\n**Unmatched Entries**\n";
    print @OtherList;
