Index: scripts/services/postfix
===================================================================
RCS file: /var/cvs/logwatch/scripts/services/postfix,v
retrieving revision 1.9
diff -u -r1.9 postfix
--- scripts/services/postfix	3 Feb 2004 03:25:02 -0000	1.9
+++ scripts/services/postfix	19 Mar 2004 08:53:42 -0000
@@ -82,6 +82,7 @@
 $QueueSizeExceeded = 0;
 $RejectedRBL = 0;
 $ErrorRBL = 0;
+$NoFreeSpace = 0;
 
 while (defined($ThisLine = <STDIN>)) {
    if ( ( $ThisLine =~ m/^connect/ ) or 
@@ -155,7 +156,9 @@
    #   $RejectDomain{$Host}++;
    # above two lines included in generic reject sender on next condition
    } elsif ( ($Host,$Sender,$Reason) = ($ThisLine =~ /reject: RCPT from ([^ ]*\[[^ ]*\]): [0-9]+ <([^ ]*)>: Sender address rejected: (.*);/)) {
-      $RejectSender{$Host}++;
+      $RejectSender{$Reason}{$Host}{$Sender}++;
+      $RejectSenderHost{$Reason}{$Host}++;
+      $RejectSenderReason{$Reason}++;
    } elsif ( ($Host,$Recip,$Reason) = ($ThisLine =~ /reject: RCPT from ([^ ]*\[[^ ]*\]): [0-9]+ <([^ ]*)>: Recipient address rejected: (.*);/)) {
       $Temp = "$Host : $Reason";
       $RejectRecip{$Recip}{$Temp}++;
@@ -186,7 +189,7 @@
    } elsif ( ($Host,$MyName) = ($ThisLine =~ /warning: host ([^ ]*\[[^ ]*\]) replied to HELO\/EHLO with my own hostname ([^ ]*)$/)) {
       $Temp = "$Host : replied to HELO\/EHLO with my own hostname $MyName";
       $HeloError{$Temp}++;
-   } elsif ( ($Host,$Reason) = ($ThisLine =~ /reject: RCPT from ([^ ]*\[[^ ]*\]): 504 <[^ ]*>: Helo command rejected: (.*);/)) {
+   } elsif ( ($Host,$Reason) = ($ThisLine =~ /reject: RCPT from ([^ ]*\[[^ ]*\]): \d+ <[^ ]*>: Helo command rejected: (.*);/)) {
       $Temp = "$Host : Helo command rejected \($Reason\)";
       $HeloError{$Temp}++;
    } elsif ( ($Size,$Host) = ($ThisLine =~ /bad size limit "\(([^ ]*)\)" in EHLO reply from ([^ ]*\[[^ ]*\])$/)) {
@@ -226,6 +229,8 @@
       $QueueWriteError{$Reason}++;
    } elsif ( ($Reason) = ($ThisLine =~ /warning: [^ ]*\/[a-zA-Z0-9]+: (Error writing message file)$/)) {
       $MessageWriteError{$Reason}++;
+   } elsif ( $ThisLine =~ /reject: RCPT from [^ ]*\[[^ ]*\]: \d+ Insufficient system storage; from=<.*> to=<.*>/) {
+      $NoFreeSpace++;
    } elsif ( ($Warn) = ($ThisLine =~ /^warning: (.*)/)) {
       # keep this as the next to last condition
       $UnknownWarnings{$Warn}++;
@@ -236,6 +241,13 @@
    }
 }
 
+##################################################################
+
+if ($NoFreeSpace > 0) {
+   print "\nWARNING!!!\n";
+   print "Insufficient system storage error $NoFreeSpace Time(s)\n";
+}
+
 if ($MsgsSent > 0) {
    print "\n\n$BytesTransferred bytes transferred";
    print "\n$MsgsSent messages sent";
@@ -362,11 +374,16 @@
 #}
 
 if (keys %RejectSender) {
-   print "\n\nMessages rejected from sender:\n";
-   foreach $Sender (sort {$a cmp $b} keys %RejectSender) {
-      print "    $Sender:\n";
-      foreach $Host (sort {$a cmp $b} keys %{$RejectSender{$Sender}} ) {
-         print "        $Host : $RejectSender{$Sender}{$Host} Times(s)\n";
+   print "\n\nMessages rejected:\n";
+   foreach $Reason (sort {$a cmp $b} keys %RejectSender) {
+      print "    $Reason $RejectSenderReason{$Reason} Time(s)\n";
+      foreach $Host (sort {$a cmp $b} keys %{$RejectSender{$Reason}} ) {
+         print "        $Host $RejectSenderHost{$Reason}{$Host} Time(s)\n";
+         if ($Detail >= 5) {
+            foreach $Sender (sort {$a cmp $b} keys %{$RejectSender{$Reason}{$Host}} ) {
+               print "           $Sender : $RejectSender{$Reason}{$Host}{$Sender} Time(s)\n";
+            }
+         }
       }
    }
 }
@@ -376,7 +393,7 @@
    foreach $Recip (sort {$a cmp $b} keys %RejectRecip) {
       print "    $Recip:\n";
       foreach $Host (sort {$a cmp $b} keys %{$RejectRecip{$Recip}} ) {
-         print "        $Host : $RejectRecip{$Recip}{$Host} Times(s)\n";
+         print "        $Host : $RejectRecip{$Recip}{$Host} Time(s)\n";
       }
    }
 }
@@ -508,7 +525,7 @@
 if (keys %UnknownWarnings) {
    print "\n\nUnrecognized warning:\n";
    foreach $ThisOne (sort {$a cmp $b} keys %UnknownWarnings) {
-      print "    $ThisOne : $UnknownWarnings{$ThisOne} Times(s)\n";
+      print "    $ThisOne : $UnknownWarnings{$ThisOne} Time(s)\n";
    }
 }
 
